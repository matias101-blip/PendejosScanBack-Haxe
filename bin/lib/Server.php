<?php
/**
 * Generated by Haxe 4.3.6
 */

use \tink\core\_Future\SyncFuture;
use \php\Boot;
use \tink\core\_Lazy\LazyConst;
use \tink\core\_Promise\Recover_Impl_;
use \tink\web\routing\Router0;
use \tink\http\containers\PhpContainer;
use \tink\core\_Future\Future_Impl_;
use \tink\http\SimpleHandler;
use \tink\http\_Response\OutgoingResponse_Impl_;
use \tink\web\routing\Context;

class Server {
	/**
	 * @return void
	 */
	public static function main () {
		#src/Server.hx:22: characters 9-56
		header("Access-Control-Allow-Origin: *");
		#src/Server.hx:23: characters 9-74
		header("Access-Control-Allow-Methods: GET, POST, OPTIONS");
		#src/Server.hx:24: characters 9-83
		header("Access-Control-Allow-Headers: Content-Type, Authorization");
		#src/Server.hx:25: characters 9-43
		$container = PhpContainer::$inst;
		#src/Server.hx:26: characters 9-51
		$router = new Router0(new \Root());
		#src/Server.hx:27: lines 27-30
		$container->run(new SimpleHandler(function ($req) use (&$router) {
			#src/Server.hx:28: lines 28-29
			$this1 = $router->route(Context::ofRequest($req));
			$f = Recover_Impl_::ofSync(Boot::getStaticClosure(OutgoingResponse_Impl_::class, 'reportError'));
			return Future_Impl_::flatMap($this1, function ($o) use (&$f) {
				$__hx__switch = ($o->index);
				if ($__hx__switch === 0) {
					$d = $o->params[0];
					return new SyncFuture(new LazyConst($d));
				} else if ($__hx__switch === 1) {
					$e = $o->params[0];
					return $f($e);
				}
			});
		}));
	}
}

Boot::registerClass(Server::class, 'Server');
