<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace tjson;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\Exception;
use \haxe\Utf8;
use \php\_Boot\HxString;

class TJSONParser {
	/**
	 * @var mixed[]|\Array_hx
	 */
	public $cache;
	/**
	 * @var int
	 */
	public $currentLine;
	/**
	 * @var string
	 */
	public $fileName;
	/**
	 * @var \EReg
	 */
	public $floatRegex;
	/**
	 * @var \EReg
	 */
	public $intRegex;
	/**
	 * @var string
	 */
	public $json;
	/**
	 * @var bool
	 */
	public $lastSymbolQuoted;
	/**
	 * @var int
	 */
	public $pos;
	/**
	 * @var \Closure
	 */
	public $strProcessor;

	/**
	 * @param string $vjson
	 * @param string $vfileName
	 * @param \Closure $stringProcessor
	 * 
	 * @return void
	 */
	public function __construct ($vjson, $vfileName = "JSON Data", $stringProcessor = null) {
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:43: lines 43-53
		if ($vfileName === null) {
			$vfileName = "JSON Data";
		}
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:44: characters 3-15
		$this->json = $vjson;
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:45: characters 3-23
		$this->fileName = $vfileName;
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:46: characters 3-18
		$this->currentLine = 1;
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:47: characters 9-33
		$this->lastSymbolQuoted = false;
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:48: characters 3-10
		$this->pos = 0;
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:49: characters 3-37
		$this->floatRegex = new \EReg("^-?[0-9]*\\.[0-9]+\$", "");
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:50: characters 3-27
		$this->intRegex = new \EReg("^-?[0-9]+\$", "");
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:51: characters 3-83
		$this->strProcessor = ($stringProcessor === null ? Boot::getInstanceClosure($this, 'defaultStringProcessor') : $stringProcessor);
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:52: characters 3-22
		$this->cache = new \Array_hx();
	}

	/**
	 * @param string $symbol
	 * 
	 * @return mixed
	 */
	public function convertSymbolToProperType ($symbol) {
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:140: lines 140-148
		if ($this->lastSymbolQuoted) {
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:143: lines 143-146
			if (\StringTools::startsWith($symbol, TJSON::$OBJECT_REFERENCE_PREFIX)) {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:144: characters 5-85
				$idx = \Std::parseInt(\mb_substr($symbol, mb_strlen(TJSON::$OBJECT_REFERENCE_PREFIX), null));
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:145: characters 5-22
				return ($this->cache->arr[$idx] ?? null);
			}
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:147: characters 4-17
			return $symbol;
		}
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:149: lines 149-151
		if ($this->looksLikeFloat($symbol)) {
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:150: characters 4-33
			return \Std::parseFloat($symbol);
		}
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:152: lines 152-154
		if ($this->looksLikeInt($symbol)) {
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:153: characters 4-31
			return \Std::parseInt($symbol);
		}
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:155: lines 155-157
		if (\mb_strtolower($symbol) === "true") {
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:156: characters 4-15
			return true;
		}
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:158: lines 158-160
		if (\mb_strtolower($symbol) === "false") {
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:159: characters 4-16
			return false;
		}
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:161: lines 161-163
		if (\mb_strtolower($symbol) === "null") {
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:162: characters 4-15
			return null;
		}
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:165: characters 3-16
		return $symbol;
	}

	/**
	 * @param string $str
	 * 
	 * @return mixed
	 */
	public function defaultStringProcessor ($str) {
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:348: characters 3-13
		return $str;
	}

	/**
	 * @return mixed
	 */
	public function doArray () {
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:117: characters 3-47
		$a = new \Array_hx();
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:118: characters 3-19
		$val = null;
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:119: lines 119-135
		while ($this->pos < mb_strlen($this->json)) {
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:120: characters 4-23
			$val = $this->getNextSymbol();
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:121: lines 121-133
			if (($val === ",") && !$this->lastSymbolQuoted) {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:122: characters 5-13
				continue;
			} else if (($val === "]") && !$this->lastSymbolQuoted) {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:125: characters 5-13
				return $a;
			} else if (($val === "{") && !$this->lastSymbolQuoted) {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:128: characters 5-21
				$val = $this->doObject();
			} else if (($val === "[") && !$this->lastSymbolQuoted) {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:130: characters 5-20
				$val = $this->doArray();
			} else {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:132: characters 5-41
				$val = $this->convertSymbolToProperType($val);
			}
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:134: characters 4-15
			$a->arr[$a->length++] = $val;
		}
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:136: characters 3-8
		throw Exception::thrown("Unexpected end of file. Expected ']'");
	}

	/**
	 * @return mixed
	 */
	public function doObject () {
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:69: characters 3-23
		$o = new HxAnon();
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:70: characters 3-23
		$val = "";
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:71: characters 3-18
		$key = null;
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:72: characters 3-30
		$isClassOb = false;
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:73: characters 3-16
		$_this = $this->cache;
		$_this->arr[$_this->length++] = $o;
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:74: lines 74-111
		while ($this->pos < mb_strlen($this->json)) {
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:75: characters 4-23
			$key = $this->getNextSymbol();
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:76: characters 4-47
			if (($key === ",") && !$this->lastSymbolQuoted) {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:76: characters 39-47
				continue;
			}
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:77: lines 77-83
			if (($key === "}") && !$this->lastSymbolQuoted) {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:79: lines 79-81
				if ($isClassOb && (Boot::dynamicField($o, 'TJ_unserialize') !== null)) {
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:80: characters 6-24
					$o->TJ_unserialize();
				}
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:82: characters 5-13
				return $o;
			}
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:85: characters 4-36
			$seperator = $this->getNextSymbol();
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:86: lines 86-88
			if ($seperator !== ":") {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:87: characters 5-10
				throw Exception::thrown("Expected ':' but got '" . ($seperator??'null') . "' instead.");
			}
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:90: characters 4-28
			$v = $this->getNextSymbol();
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:92: lines 92-100
			if ($key === "_hxcls") {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:93: characters 5-35
				$cls = \Type::resolveClass($v);
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:94: characters 5-24
				if ($cls === null) {
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:94: characters 19-24
					throw Exception::thrown("Invalid class name - " . ($v??'null'));
				}
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:95: characters 5-38
				$o = \Type::createEmptyInstance($cls);
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:96: characters 5-16
				$_this = $this->cache;
				if ($_this->length > 0) {
					$_this->length--;
				}
				\array_pop($_this->arr);
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:97: characters 5-18
				$_this1 = $this->cache;
				$_this1->arr[$_this1->length++] = $o;
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:98: characters 5-21
				$isClassOb = true;
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:99: characters 5-13
				continue;
			}
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:103: lines 103-109
			if (($v === "{") && !$this->lastSymbolQuoted) {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:104: characters 5-21
				$val = $this->doObject();
			} else if (($v === "[") && !$this->lastSymbolQuoted) {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:106: characters 5-20
				$val = $this->doArray();
			} else {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:108: characters 5-39
				$val = $this->convertSymbolToProperType($v);
			}
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:110: characters 4-31
			\Reflect::setField($o, $key, $val);
		}
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:112: characters 3-8
		throw Exception::thrown("Unexpected end of file. Expected '}'");
	}

	/**
	 * @return mixed
	 */
	public function doParse () {
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:56: lines 56-65
		try {
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:58: characters 19-34
			$_g = $this->getNextSymbol();
			if ($_g === "[") {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:60: characters 15-24
				return $this->doArray();
			} else if ($_g === "{") {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:59: characters 15-25
				return $this->doObject();
			} else {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:61: characters 10-11
				$s = $_g;
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:61: characters 13-41
				return $this->convertSymbolToProperType($s);
			}
		} catch(\Throwable $_g) {
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:63: characters 10-11
			$_g1 = Exception::caught($_g)->unwrap();
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:56: lines 56-65
			if (is_string($_g1)) {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:63: characters 10-11
				$e = $_g1;
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:64: characters 4-9
				throw Exception::thrown(($this->fileName??'null') . " on line " . ($this->currentLine??'null') . ": " . ($e??'null'));
			} else {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:56: lines 56-65
				throw $_g;
			}
		}
	}

	/**
	 * @return string
	 */
	public function getNextSymbol () {
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:186: characters 3-25
		$this->lastSymbolQuoted = false;
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:187: characters 3-21
		$c = "";
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:188: characters 3-28
		$inQuote = false;
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:189: characters 3-27
		$quoteType = "";
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:190: characters 3-26
		$symbol = "";
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:191: characters 3-29
		$inEscape = false;
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:192: characters 3-29
		$inSymbol = false;
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:193: characters 3-29
		$inLineComment = false;
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:194: characters 3-30
		$inBlockComment = false;
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:196: lines 196-339
		while ($this->pos < mb_strlen($this->json)) {
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:197: characters 8-26
			$index = $this->pos++;
			$c = ($index < 0 ? "" : \mb_substr($this->json, $index, 1));
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:198: lines 198-199
			if (($c === "\x0A") && !$inSymbol) {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:199: characters 5-18
				$this->currentLine++;
			}
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:200: lines 200-206
			if ($inLineComment) {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:201: lines 201-204
				if (($c === "\x0A") || ($c === "\x0D")) {
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:202: characters 6-27
					$inLineComment = false;
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:203: characters 6-11
					$this->pos++;
				}
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:205: characters 5-13
				continue;
			}
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:208: lines 208-214
			if ($inBlockComment) {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:209: characters 8-41
				$tmp = null;
				if ($c === "*") {
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:209: characters 18-34
					$index1 = $this->pos;
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:209: characters 8-41
					$tmp = (($index1 < 0 ? "" : \mb_substr($this->json, $index1, 1))) === "/";
				} else {
					$tmp = false;
				}
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:209: lines 209-212
				if ($tmp) {
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:210: characters 6-28
					$inBlockComment = false;
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:211: characters 6-11
					$this->pos++;
				}
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:213: characters 5-13
				continue;
			}
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:216: lines 216-301
			if ($inQuote) {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:217: lines 217-280
				if ($inEscape) {
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:218: characters 6-22
					$inEscape = false;
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:219: lines 219-222
					if (($c === "'") || ($c === "\"")) {
						#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:220: characters 7-18
						$symbol = ($symbol??'null') . ($c??'null');
						#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:221: characters 7-15
						continue;
					}
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:223: lines 223-226
					if ($c === "t") {
						#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:224: characters 7-21
						$symbol = ($symbol??'null') . "\x09";
						#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:225: characters 7-15
						continue;
					}
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:227: lines 227-230
					if ($c === "n") {
						#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:228: characters 7-21
						$symbol = ($symbol??'null') . "\x0A";
						#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:229: characters 7-15
						continue;
					}
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:231: lines 231-234
					if ($c === "\\") {
						#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:232: characters 7-21
						$symbol = ($symbol??'null') . "\\";
						#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:233: characters 7-15
						continue;
					}
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:235: lines 235-238
					if ($c === "r") {
						#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:236: characters 7-21
						$symbol = ($symbol??'null') . "\x0D";
						#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:237: characters 7-15
						continue;
					}
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:239: lines 239-242
					if ($c === "/") {
						#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:240: characters 7-20
						$symbol = ($symbol??'null') . "/";
						#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:241: characters 7-15
						continue;
					}
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:244: lines 244-266
					if ($c === "u") {
						#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:245: characters 25-42
						$hexValue = 0;
						#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:247: characters 35-39
						$_g = 0;
						#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:247: lines 247-259
						while ($_g < 4) {
							#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:247: characters 35-40
							$i = $_g++;
							#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:248: lines 248-249
							if ($this->pos >= mb_strlen($this->json)) {
								#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:249: characters 31-36
								throw Exception::thrown("Unfinished UTF8 character");
							}
							#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:250: characters 20-52
							$nc = HxString::charCodeAt($this->json, $this->pos++);
							#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:251: characters 29-53
							$hexValue <<= 4;
							#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:252: lines 252-258
							if (($nc >= 48) && ($nc <= 57)) {
								#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:253: characters 31-50
								$hexValue += $nc - 48;
							} else if (($nc >= 65) && ($nc <= 70)) {
								#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:255: characters 31-55
								$hexValue += 10 + $nc - 65;
							} else if (($nc >= 97) && ($nc <= 102)) {
								#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:257: characters 31-55
								$hexValue += 10 + $nc - 95;
							} else {
								#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:258: characters 34-39
								throw Exception::thrown("Not a hex digit");
							}
						}
						#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:261: characters 7-33
						$utf = new Utf8();
						#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:262: characters 7-28
						$utf->addChar($hexValue);
						#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:263: characters 7-31
						$symbol = ($symbol??'null') . ($utf->toString()??'null');
						#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:265: characters 7-15
						continue;
					}
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:269: characters 6-11
					throw Exception::thrown("Invalid escape sequence '\\" . ($c??'null') . "'");
				} else {
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:271: lines 271-274
					if ($c === "\\") {
						#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:272: characters 7-22
						$inEscape = true;
						#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:273: characters 7-15
						continue;
					}
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:275: lines 275-277
					if ($c === $quoteType) {
						#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:276: characters 7-20
						return $symbol;
					}
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:278: characters 6-15
					$symbol = ($symbol??'null') . ($c??'null');
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:279: characters 6-14
					continue;
				}
			} else if ($c === "/") {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:286: characters 14-30
				$index2 = $this->pos;
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:286: characters 5-31
				$c2 = ($index2 < 0 ? "" : \mb_substr($this->json, $index2, 1));
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:289: lines 289-300
				if ($c2 === "/") {
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:290: characters 6-24
					$inLineComment = true;
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:291: characters 6-11
					$this->pos++;
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:292: characters 6-14
					continue;
				} else if ($c2 === "*") {
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:297: characters 6-25
					$inBlockComment = true;
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:298: characters 6-11
					$this->pos++;
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:299: characters 6-14
					continue;
				}
			}
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:305: lines 305-338
			if ($inSymbol) {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:306: lines 306-312
				if (($c === " ") || ($c === "\x0A") || ($c === "\x0D") || ($c === "\x09") || ($c === ",") || ($c === ":") || ($c === "}") || ($c === "]")) {
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:307: characters 6-11
					$this->pos--;
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:308: characters 6-19
					return $symbol;
				} else {
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:310: characters 6-15
					$symbol = ($symbol??'null') . ($c??'null');
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:311: characters 6-14
					continue;
				}
			} else {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:316: lines 316-318
				if (($c === " ") || ($c === "\x09") || ($c === "\x0A") || ($c === "\x0D")) {
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:317: characters 6-14
					continue;
				}
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:320: lines 320-322
				if (($c === "{") || ($c === "}") || ($c === "[") || ($c === "]") || ($c === ",") || ($c === ":")) {
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:321: characters 6-14
					return $c;
				}
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:326: lines 326-335
				if (($c === "'") || ($c === "\"")) {
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:327: characters 6-20
					$inQuote = true;
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:328: characters 6-19
					$quoteType = $c;
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:329: characters 6-29
					$this->lastSymbolQuoted = true;
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:330: characters 6-14
					continue;
				} else {
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:332: characters 6-19
					$inSymbol = true;
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:333: characters 6-16
					$symbol = $c;
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:334: characters 6-14
					continue;
				}
			}
		}
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:340: lines 340-342
		if ($inQuote) {
			#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:341: characters 4-9
			throw Exception::thrown("Unexpected end of data. Expected ( " . ($quoteType??'null') . " )");
		}
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:343: characters 3-16
		return $symbol;
	}

	/**
	 * @param string $s
	 * 
	 * @return bool
	 */
	public function looksLikeFloat ($s) {
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:170: lines 170-178
		if (!$this->floatRegex->match($s)) {
			if ($this->intRegex->match($s)) {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:172: characters 5-38
				$intStr = $this->intRegex->matched(0);
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:173: lines 173-176
				if (HxString::charCodeAt($intStr, 0) === 45) {
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:174: characters 6-28
					return strcmp($intStr, "-2147483648") > 0;
				} else {
					#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:176: characters 6-27
					return strcmp($intStr, "2147483647") > 0;
				}
			} else {
				#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:170: lines 170-178
				return false;
			}
		} else {
			return true;
		}
	}

	/**
	 * @param string $s
	 * 
	 * @return bool
	 */
	public function looksLikeInt ($s) {
		#/home/thehunter101/haxe/tjson/1,4,0/tjson/TJSON.hx:182: characters 3-27
		return $this->intRegex->match($s);
	}
}

Boot::registerClass(TJSONParser::class, 'tjson.TJSONParser');
