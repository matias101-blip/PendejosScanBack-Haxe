<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace tjson;

use \php\Boot;
use \haxe\Exception;
use \haxe\ds\StringMap;
use \haxe\ds\List_hx;

class TJSONEncoder {
	/**
	 * @var mixed[]|\Array_hx
	 */
	public $cache;
	/**
	 * @var bool
	 */
	public $uCache;

	/**
	 * @param bool $useCache
	 * 
	 * @return void
	 */
	public function __construct ($useCache = true) {
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:358: lines 358-361
		if ($useCache === null) {
			$useCache = true;
		}
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:359: characters 3-20
		$this->uCache = $useCache;
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:360: characters 3-32
		if ($this->uCache) {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:360: characters 13-32
			$this->cache = new \Array_hx();
		}
	}

	/**
	 * @param mixed $value
	 * 
	 * @return string
	 */
	public function cacheEncode ($value) {
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:465: characters 3-25
		if (!$this->uCache) {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:465: characters 14-25
			return null;
		}
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:467: characters 12-16
		$_g = 0;
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:467: characters 16-28
		$_g1 = $this->cache->length;
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:467: lines 467-471
		while ($_g < $_g1) {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:467: characters 12-28
			$c = $_g++;
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:468: lines 468-470
			if (Boot::equal(($this->cache->arr[$c] ?? null), $value)) {
				#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:469: characters 5-51
				return "\"" . (TJSON::$OBJECT_REFERENCE_PREFIX??'null') . ($c??'null') . "\"";
			}
		}
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:472: characters 3-20
		$_this = $this->cache;
		$_this->arr[$_this->length++] = $value;
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:473: characters 3-14
		return null;
	}

	/**
	 * @param mixed $obj
	 * @param mixed $style
	 * 
	 * @return string
	 */
	public function doEncode ($obj, $style = null) {
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:364: lines 364-366
		if (!\Reflect::isObject($obj)) {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:365: characters 4-9
			throw Exception::thrown("Provided object is not an object.");
		}
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:367: characters 3-22
		$st = null;
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:368: lines 368-374
		if (($style instanceof EncodeStyle)) {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:369: characters 4-14
			$st = $style;
		} else if ($style === "fancy") {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:372: characters 4-25
			$st = new FancyStyle();
		} else {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:374: characters 8-30
			$st = new SimpleStyle();
		}
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:375: characters 3-32
		$buffer = new \StringBuf();
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:376: lines 376-384
		if (($obj instanceof \Array_hx) || ($obj instanceof List_hx)) {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:377: characters 4-43
			$buffer->add($this->encodeIterable($obj, $st, 0));
		} else if (($obj instanceof StringMap)) {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:380: characters 4-37
			$buffer->add($this->encodeMap($obj, $st, 0));
		} else {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:382: characters 4-20
			$this->cacheEncode($obj);
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:383: characters 4-40
			$buffer->add($this->encodeObject($obj, $st, 0));
		}
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:385: characters 3-27
		return $buffer->b;
	}

	/**
	 * @param object $obj
	 * @param EncodeStyle $style
	 * @param int $depth
	 * 
	 * @return string
	 */
	public function encodeIterable ($obj, $style, $depth) {
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:451: characters 3-32
		$buffer = new \StringBuf();
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:452: characters 3-38
		$buffer->add($style->beginArray($depth));
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:453: characters 3-22
		$fieldCount = 0;
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:454: characters 17-20
		$value = $obj->iterator();
		while ($value->hasNext()) {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:454: lines 454-459
			$value1 = $value->next();
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:455: lines 455-456
			if ($fieldCount++ > 0) {
				#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:455: characters 24-63
				$buffer->add($style->entrySeperator($depth));
			} else {
				#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:456: characters 9-44
				$buffer->add($style->firstEntry($depth));
			}
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:457: characters 4-49
			$buffer->add($this->encodeValue($value1, $style, $depth));
		}
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:460: characters 3-36
		$buffer->add($style->endArray($depth));
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:461: characters 3-27
		return $buffer->b;
	}

	/**
	 * @param StringMap $obj
	 * @param EncodeStyle $style
	 * @param int $depth
	 * 
	 * @return string
	 */
	public function encodeMap ($obj, $style, $depth) {
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:435: characters 3-32
		$buffer = new \StringBuf();
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:436: characters 3-39
		$buffer->add($style->beginObject($depth));
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:437: characters 3-22
		$fieldCount = 0;
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:438: characters 17-27
		$data = \array_values(\array_map("strval", \array_keys($obj->data)));
		$field_current = 0;
		$field_length = \count($data);
		$field_data = $data;
		while ($field_current < $field_length) {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:438: lines 438-444
			$field = $field_data[$field_current++];
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:439: lines 439-440
			if ($fieldCount++ > 0) {
				#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:439: characters 25-64
				$buffer->add($style->entrySeperator($depth));
			} else {
				#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:440: characters 9-44
				$buffer->add($style->firstEntry($depth));
			}
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:441: characters 4-39
			$value = ($obj->data[$field] ?? null);
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:442: characters 4-60
			$buffer->add("\"" . ($field??'null') . "\"" . ($style->keyValueSeperator($depth)??'null'));
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:443: characters 4-48
			$buffer->add($this->encodeValue($value, $style, $depth));
		}
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:445: characters 3-37
		$buffer->add($style->endObject($depth));
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:446: characters 3-27
		return $buffer->b;
	}

	/**
	 * @param mixed $obj
	 * @param EncodeStyle $style
	 * @param int $depth
	 * 
	 * @return string
	 */
	public function encodeObject ($obj, $style, $depth) {
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:389: characters 3-32
		$buffer = new \StringBuf();
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:390: characters 3-39
		$buffer->add($style->beginObject($depth));
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:391: characters 3-22
		$fieldCount = 0;
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:392: characters 3-28
		$fields = null;
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:393: characters 3-45
		$dontEncodeFields = null;
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:394: characters 3-32
		$cls = \Type::getClass($obj);
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:395: lines 395-399
		if ($cls !== null) {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:396: characters 4-40
			$fields = \Type::getInstanceFields($cls);
		} else {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:398: characters 4-32
			$fields = \Reflect::fields($obj);
		}
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:402: characters 10-26
		$_g = \Type::typeof($obj);
		if ($_g->index === 6) {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:403: characters 16-17
			$c = $_g->params[0];
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:404: lines 404-405
			if ($fieldCount++ > 0) {
				#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:404: characters 26-65
				$buffer->add($style->entrySeperator($depth));
			} else {
				#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:405: characters 10-45
				$buffer->add($style->firstEntry($depth));
			}
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:406: characters 5-58
			$buffer->add("\"_hxcls\"" . ($style->keyValueSeperator($depth)??'null'));
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:407: characters 5-65
			$buffer->add($this->encodeValue(\Type::getClassName($c), $style, $depth));
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:409: lines 409-411
			if (Boot::dynamicField($obj, 'TJ_noEncode') !== null) {
				#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:410: characters 6-42
				$dontEncodeFields = $obj->TJ_noEncode();
			}
		}
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:415: lines 415-425
		$_g = 0;
		while ($_g < $fields->length) {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:415: characters 8-13
			$field = ($fields->arr[$_g] ?? null);
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:415: lines 415-425
			++$_g;
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:416: characters 4-76
			if (($dontEncodeFields !== null) && ($dontEncodeFields->indexOf($field) >= 0)) {
				#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:416: characters 68-76
				continue;
			}
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:417: characters 4-49
			$value = \Reflect::field($obj, $field);
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:418: characters 4-55
			$vStr = $this->encodeValue($value, $style, $depth);
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:419: lines 419-423
			if ($vStr !== null) {
				#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:420: lines 420-421
				if ($fieldCount++ > 0) {
					#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:420: characters 26-65
					$buffer->add($style->entrySeperator($depth));
				} else {
					#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:421: characters 10-45
					$buffer->add($style->firstEntry($depth));
				}
				#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:422: characters 5-66
				$buffer->add("\"" . ($field??'null') . "\"" . ($style->keyValueSeperator($depth)??'null') . ($vStr??'null'));
			}
		}
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:429: characters 3-37
		$buffer->add($style->endObject($depth));
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:430: characters 3-27
		return $buffer->b;
	}

	/**
	 * @param mixed $value
	 * @param EncodeStyle $style
	 * @param int $depth
	 * 
	 * @return string
	 */
	public function encodeValue ($value, $style, $depth) {
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:477: lines 477-509
		if (Boot::isOfType($value, Boot::getClass('Int')) || (is_float($value) || is_int($value))) {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:478: characters 5-18
			return $value;
		} else if (($value instanceof \Array_hx) || ($value instanceof List_hx)) {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:481: characters 4-34
			$v = $value;
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:482: characters 4-42
			return $this->encodeIterable($v, $style, $depth + 1);
		} else if (($value instanceof List_hx)) {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:485: characters 4-33
			$v = $value;
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:486: characters 4-42
			return $this->encodeIterable($v, $style, $depth + 1);
		} else if (($value instanceof StringMap)) {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:490: characters 4-41
			return $this->encodeMap($value, $style, $depth + 1);
		} else if (is_string($value)) {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:494: characters 4-117
			return "\"" . (\StringTools::replace(\StringTools::replace(\StringTools::replace(\StringTools::replace(\Std::string($value), "\\", "\\\\"), "\x0A", "\\n"), "\x0D", "\\r"), "\"", "\\\"")??'null') . "\"";
		} else if (is_bool($value)) {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:497: characters 4-17
			return $value;
		} else if (\Reflect::isObject($value)) {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:500: characters 4-33
			$ret = $this->cacheEncode($value);
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:501: characters 4-30
			if ($ret !== null) {
				#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:501: characters 20-30
				return $ret;
			}
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:502: characters 4-44
			return $this->encodeObject($value, $style, $depth + 1);
		} else if ($value === null) {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:505: characters 4-18
			return "null";
		} else {
			#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:508: characters 4-15
			return null;
		}
	}
}

Boot::registerClass(TJSONEncoder::class, 'tjson.TJSONEncoder');
