<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace tjson;

use \php\Boot;

class TJSON {
	/**
	 * @var string
	 */
	static public $OBJECT_REFERENCE_PREFIX = "@~obRef#";

	/**
	 * Serializes a dynamic object or an array into a JSON string.
	 * @param Dynamic - The object to be serialized
	 * @param Dynamic - The style to use. Either an object implementing EncodeStyle interface or the strings 'fancy' or 'simple'.
	 * 
	 * @param mixed $obj
	 * @param mixed $style
	 * @param bool $useCache
	 * 
	 * @return string
	 */
	public static function encode ($obj, $style = null, $useCache = true) {
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:22: lines 22-25
		if ($useCache === null) {
			$useCache = true;
		}
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:23: characters 3-38
		$t = new TJSONEncoder($useCache);
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:24: characters 3-31
		return $t->doEncode($obj, $style);
	}

	/**
	 * Parses a JSON string into a haxe dynamic object or array.
	 * @param String - The JSON string to parse
	 * @param String the file name to whic the JSON code belongs. Used for generating nice error messages.
	 * 
	 * @param string $json
	 * @param string $fileName
	 * @param \Closure $stringProcessor
	 * 
	 * @return mixed
	 */
	public static function parse ($json, $fileName = "JSON Data", $stringProcessor = null) {
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:12: lines 12-15
		if ($fileName === null) {
			$fileName = "JSON Data";
		}
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:13: characters 9-66
		$t = new TJSONParser($json, $fileName, $stringProcessor);
		#/home/sinherani/haxelib/tjson/1,4,0/tjson/TJSON.hx:14: characters 3-21
		return $t->doParse();
	}
}

Boot::registerClass(TJSON::class, 'tjson.TJSON');
