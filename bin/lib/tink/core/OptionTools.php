<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace tink\core;

use \php\_Boot\HxAnon;
use \tink\core\_Lazy\LazyObject;
use \php\Boot;
use \haxe\Exception;
use \haxe\ds\Option as DsOption;
use \tink\core\_Lazy\Lazy_Impl_;

class OptionTools {
	/**
	 *  Returns `true` if the option is `Some` and the value is equal to `v`, otherwise `false`
	 * 
	 * @param DsOption $o
	 * @param mixed $v
	 * 
	 * @return bool
	 */
	public static function equals ($o, $v) {
		#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:85: characters 12-60
		if ($o->index === 0) {
			$v1 = $o->params[0];
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:85: characters 49-59
			return Boot::equal($v1, $v);
		} else {
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:85: characters 12-60
			return false;
		}
	}

	/**
	 *  Returns `Some(value)` if the option is `Some` and the filter function evaluates to `true`, otherwise `None`
	 * 
	 * @param DsOption $o
	 * @param \Closure $f
	 * 
	 * @return DsOption
	 */
	public static function filter ($o, $f) {
		#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:67: lines 67-70
		if ($o->index === 0) {
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:68: characters 17-21
			if ($f($o->params[0]) === false) {
				#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:68: characters 33-37
				return DsOption::None();
			} else {
				#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:69: characters 16-17
				return $o;
			}
		} else {
			return $o;
		}
	}

	/**
	 *  Transforms the option value with a transform function
	 *  Different from `map`, the transform function of `flatMap` returns an `Option`
	 * 
	 * @param DsOption $o
	 * @param \Closure $f
	 * 
	 * @return DsOption
	 */
	public static function flatMap ($o, $f) {
		#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:102: lines 102-105
		if ($o->index === 0) {
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:103: characters 17-18
			$v = $o->params[0];
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:103: characters 21-25
			return $f($v);
		} else {
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:104: characters 16-20
			return DsOption::None();
		}
	}

	/**
	 * @param DsOption $o
	 * @param object $pos
	 * 
	 * @return mixed
	 */
	public static function force ($o, $pos = null) {
		#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:10: characters 12-24
		if ($o->index === 0) {
			$v = $o->params[0];
			return $v;
		} else {
			throw Exception::thrown(new TypedError(404, "Some value expected but none found", $pos));
		}
	}

	/**
	 *  Creates an iterator from the option.
	 *  The iterator has one item if the option is `Some`, and no items if it is `None`
	 * 
	 * @param DsOption $o
	 * 
	 * @return OptionIter
	 */
	public static function iterator ($o) {
		#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:112: characters 5-29
		return new OptionIter($o);
	}

	/**
	 *  Transforms the option value with a transform function
	 *  Different from `flatMap`, the transform function of `map` returns a plain value
	 * 
	 * @param DsOption $o
	 * @param \Closure $f
	 * 
	 * @return DsOption
	 */
	public static function map ($o, $f) {
		#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:92: lines 92-95
		if ($o->index === 0) {
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:93: characters 17-18
			$v = $o->params[0];
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:93: characters 21-31
			return DsOption::Some($f($v));
		} else {
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:94: characters 16-20
			return DsOption::None();
		}
	}

	/**
	 *  Extracts the value if the option is `Some`, uses the fallback value otherwise
	 * 
	 * @param DsOption $o
	 * @param LazyObject $l
	 * 
	 * @return mixed
	 */
	public static function or ($o, $l) {
		#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:40: lines 40-43
		if ($o->index === 0) {
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:41: characters 17-18
			$v = $o->params[0];
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:41: characters 21-22
			return $v;
		} else {
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:42: characters 16-23
			return Lazy_Impl_::get($l);
		}
	}

	/**
	 *  Extracts the value if the option is `Some`, otherwise `null`
	 * 
	 * @param DsOption $o
	 * 
	 * @return mixed
	 */
	public static function orNull ($o) {
		#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:58: lines 58-61
		if ($o->index === 0) {
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:59: characters 17-18
			$v = $o->params[0];
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:59: characters 21-22
			return $v;
		} else {
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:60: characters 16-20
			return null;
		}
	}

	/**
	 *  Returns the option if it is `Some`, otherwise the fallback option
	 * 
	 * @param DsOption $o
	 * @param LazyObject $fallback
	 * 
	 * @return DsOption
	 */
	public static function orTry ($o, $fallback) {
		#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:49: lines 49-52
		if ($o->index === 0) {
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:50: characters 17-18
			$_g = $o->params[0];
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:50: characters 21-22
			return $o;
		} else {
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:51: characters 16-30
			return Lazy_Impl_::get($fallback);
		}
	}

	/**
	 *  Returns `true` if the option is `Some` and the filter function evaluates to `true`, otherwise `false`
	 * 
	 * @param DsOption $o
	 * @param \Closure $f
	 * 
	 * @return bool
	 */
	public static function satisfies ($o, $f) {
		#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:76: lines 76-79
		if ($o->index === 0) {
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:77: characters 17-18
			$v = $o->params[0];
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:77: characters 21-25
			return $f($v);
		} else {
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:78: characters 16-21
			return false;
		}
	}

	/**
	 *  Extracts the value if the option is `Some`, throws an `Error` otherwise
	 * 
	 * @param DsOption $o
	 * @param object $pos
	 * 
	 * @return mixed
	 */
	public static function sure ($o, $pos = null) {
		#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:16: lines 16-21
		if ($o->index === 0) {
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:17: characters 17-18
			$v = $o->params[0];
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:18: characters 9-10
			return $v;
		} else {
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:20: characters 9-14
			throw Exception::thrown(new TypedError(404, "Some value expected but none found", $pos));
		}
	}

	/**
	 *  Creates an array from the option.
	 *  The array has one item if the option is `Some`, and no items if it is `None`
	 * 
	 * @param DsOption $o
	 * 
	 * @return mixed[]|\Array_hx
	 */
	public static function toArray ($o) {
		#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:119: lines 119-122
		if ($o->index === 0) {
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:120: characters 17-18
			$v = $o->params[0];
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:120: characters 21-24
			return \Array_hx::wrap([$v]);
		} else {
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:121: characters 16-18
			return new \Array_hx();
		}
	}

	/**
	 *  Creates an `Outcome` from an `Option`, with made-up `Failure` information
	 * 
	 * @param DsOption $o
	 * @param object $pos
	 * 
	 * @return Outcome
	 */
	public static function toOutcome ($o, $pos = null) {
		#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:28: lines 28-33
		$__hx__switch = ($o->index);
		if ($__hx__switch === 0) {
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:29: characters 19-24
			$value = $o->params[0];
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:30: characters 11-25
			return Outcome::Success($value);
		} else if ($__hx__switch === 1) {
			#/home/thehunter101/.haxe/tink_core/2,1,1/src/tink/core/Option.hx:32: characters 11-124
			return Outcome::Failure(new TypedError(404, "Some value expected but none found in " . ($pos->fileName??'null') . "@line " . ($pos->lineNumber??'null'), new HxAnon([
				"fileName" => "tink/core/Option.hx",
				"lineNumber" => 32,
				"className" => "tink.core.OptionTools",
				"methodName" => "toOutcome",
			])));
		}
	}
}

Boot::registerClass(OptionTools::class, 'tink.core.OptionTools');
