<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace tink\io;

use \tink\chunk\ChunkObject;
use \php\_Boot\HxAnon;
use \tink\core\_Future\SyncFuture;
use \php\Boot;
use \tink\streams\_Stream\Stream_Impl_;
use \tink\io\_Source\Source_Impl_;
use \tink\streams\Single;
use \tink\core\TypedError;
use \tink\streams\StreamObject;
use \tink\io\_StreamParser\StreamParser_Impl_;
use \tink\core\Outcome;
use \tink\core\_Lazy\LazyConst;
use \tink\core\_Promise\Next_Impl_;
use \tink\core\_Future\Future_Impl_;
use \tink\core\_Promise\Promise_Impl_;
use \tink\core\MPair;
use \tink\core\_Future\FutureObject;

class RealSourceTools {
	/**
	 * @param StreamObject $s
	 * 
	 * @return FutureObject
	 */
	public static function all ($s) {
		#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:193: lines 193-196
		return Future_Impl_::map(Source_Impl_::concatAll($s), function ($o) {
			$__hx__switch = ($o->index);
			if ($__hx__switch === 1) {
				#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:195: characters 19-20
				$e = $o->params[0];
				#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:195: characters 23-33
				return Outcome::Failure($e);
			} else if ($__hx__switch === 2) {
				#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:194: characters 20-21
				$c = $o->params[0];
				#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:194: characters 24-34
				return Outcome::Success($c);
			}
		});
	}

	/**
	 * @param StreamObject $s
	 * @param \Closure $rescue
	 * 
	 * @return StreamObject
	 */
	public static function idealize ($s, $rescue) {
		#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:224: characters 5-69
		return Source_Impl_::chunked($s)->idealize($rescue);
	}

	/**
	 * @param StreamObject $s
	 * @param StreamParserObject $p
	 * 
	 * @return FutureObject
	 */
	public static function parse ($s, $p) {
		#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:199: lines 199-202
		return Future_Impl_::map(StreamParser_Impl_::parse($s, $p), function ($r) {
			$__hx__switch = ($r->index);
			if ($__hx__switch === 0) {
				#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:200: characters 19-23
				$data = $r->params[0];
				#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:200: characters 25-29
				$rest = $r->params[1];
				#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:200: characters 32-61
				return Outcome::Success(new MPair($data, $rest));
			} else if ($__hx__switch === 1) {
				#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:201: characters 23-24
				$_g = $r->params[1];
				#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:201: characters 20-21
				$e = $r->params[0];
				#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:201: characters 38-48
				return Outcome::Failure($e);
			} else if ($__hx__switch === 2) {
				#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:201: characters 34-35
				$e = $r->params[0];
				#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:201: characters 38-48
				return Outcome::Failure($e);
			}
		});
	}

	/**
	 * @param StreamObject $s
	 * @param StreamParserObject $p
	 * 
	 * @return StreamObject
	 */
	public static function parseStream ($s, $p) {
		#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:221: characters 5-42
		return StreamParser_Impl_::parseStream($s, $p);
	}

	/**
	 * @param StreamObject $src
	 * @param ChunkObject $delim
	 * 
	 * @return object
	 */
	public static function split ($src, $delim) {
		#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:205: characters 5-45
		$s = RealSourceTools::parse($src, new Splitter($delim));
		#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:208: lines 208-211
		$tmp = Stream_Impl_::promise(Promise_Impl_::next($s, Next_Impl_::ofSafeSync(function ($p) use (&$src) {
			#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:208: characters 116-119
			$_g = $p->a;
			$__hx__switch = ($_g->index);
			if ($__hx__switch === 0) {
				#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:209: characters 19-24
				$chunk = $_g->params[0];
				#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:209: characters 27-45
				return new Single(new LazyConst($chunk));
			} else if ($__hx__switch === 1) {
				#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:210: characters 20-23
				return $src;
			}
		})));
		#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:212: lines 212-215
		$tmp1 = Promise_Impl_::next($s, function ($p) use (&$delim) {
			$p1 = null;
			#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:212: characters 64-67
			$_g = $p->a;
			$__hx__switch = ($_g->index);
			if ($__hx__switch === 0) {
				#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:213: characters 19-20
				$_g1 = $_g->params[0];
				#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:212: lines 212-215
				$p1 = new SyncFuture(new LazyConst(Outcome::Success($delim)));
			} else if ($__hx__switch === 1) {
				$p1 = new SyncFuture(new LazyConst(Outcome::Failure(new TypedError(404, "Delimiter not found", new HxAnon([
					"fileName" => "tink/io/Source.hx",
					"lineNumber" => 214,
					"className" => "tink.io.RealSourceTools",
					"methodName" => "split",
				])))));
			}
			return $p1;
		});
		#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:207: lines 207-217
		return new HxAnon([
			"before" => $tmp,
			"delimiter" => $tmp1,
			"after" => Stream_Impl_::promise(Promise_Impl_::next($s, Next_Impl_::ofSafeSync(function ($p) {
				#/home/thehunter101/.haxe/tink_io/0,9,0/src/tink/io/Source.hx:216: characters 101-111
				return $p->b;
			}))),
		]);
	}
}

Boot::registerClass(RealSourceTools::class, 'tink.io.RealSourceTools');
