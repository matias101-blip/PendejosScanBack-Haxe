<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace tink\http;

use \tink\http\_Client\CustomClient;
use \tink\core\_Future\SyncFuture;
use \php\Boot;
use \tink\http\clients\CurlClient;
use \tink\io\_Source\Source_Impl_;
use \tink\core\Outcome;
use \tink\core\_Lazy\LazyConst;
use \tink\http\clients\StdClient;
use \tink\core\_Future\Future_Impl_;
use \tink\_Url\Url_Impl_;
use \tink\core\_Promise\Promise_Impl_;
use \haxe\ds\EnumValueMap;
use \tink\http\clients\SocketClient;
use \tink\http\clients\LocalContainerClient;
use \tink\core\_Future\FutureObject;
use \tink\http\clients\PhpClient;

class Fetch {
	/**
	 * @var EnumValueMap
	 */
	static public $cache;

	/**
	 * @param object $url
	 * @param object $options
	 * 
	 * @return FutureObject
	 */
	public static function fetch ($url, $options = null) {
		#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:25: lines 25-66
		return Future_Impl_::irreversible(function ($cb) use (&$url, &$options) {
			#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:27: characters 4-30
			$uri = $url->path;
			#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:28: characters 4-48
			if ($url->query !== null) {
				#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:28: characters 39-48
				$tmp = $url->query;
				#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:28: characters 26-48
				$uri = ($uri??'null') . "?" . ((($tmp === null ? "null" : $tmp))??'null');
			}
			#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:30: characters 4-21
			$method = "GET";
			#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:31: characters 4-23
			$headers = null;
			#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:32: characters 4-40
			$body = Source_Impl_::$EMPTY;
			#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:33: characters 4-23
			$type = ClientType::Default();
			#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:34: characters 4-30
			$followRedirect = true;
			#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:36: lines 36-42
			if ($options !== null) {
				#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:37: characters 5-55
				if ($options->method !== null) {
					#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:37: characters 32-55
					$method = $options->method;
				}
				#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:38: characters 5-58
				if ($options->headers !== null) {
					#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:38: characters 33-58
					$headers = $options->headers;
				}
				#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:39: characters 5-49
				if ($options->body !== null) {
					#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:39: characters 30-49
					$body = $options->body;
				}
				#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:40: characters 5-53
				if ($options->client !== null) {
					#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:40: characters 32-53
					$type = $options->client;
				}
				#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:41: characters 5-63
				if ($options->followRedirect === false) {
					#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:41: characters 41-63
					$followRedirect = false;
				}
			}
			#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:44: characters 4-33
			$client = Fetch::getClient($type);
			#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:46: lines 46-47
			if (($options !== null) && ($options->augment !== null)) {
				#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:47: characters 14-45
				$pipeline = $options->augment;
				$client = CustomClient::create($client, $pipeline->before, $pipeline->after);
			}
			#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:49: lines 49-65
			$client->request(new OutgoingRequest(new OutgoingRequestHeader($method, $url, null, $headers), $body))->handle(function ($res) use (&$followRedirect, &$url, &$cb, &$options) {
				#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:53: lines 53-64
				$__hx__switch = ($res->index);
				if ($__hx__switch === 0) {
					#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:54: characters 19-22
					$res1 = $res->params[0];
					#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:55: characters 14-35
					$_g = $res1->header->statusCode;
					if ($_g === 301 || $_g === 302 || $_g === 303 || $_g === 307 || $_g === 308) {
						#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:56: characters 13-47
						$code = $_g;
						#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:56: lines 56-60
						if ($followRedirect) {
							#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:57: lines 57-59
							Promise_Impl_::next(new SyncFuture(new LazyConst($res1->header->byName(\mb_strtolower("location")))), function ($location) use (&$url, &$code, &$options) {
								#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:58: characters 48-69
								$this1 = Url_Impl_::resolve($url, Url_Impl_::fromString($location));
								#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:58: characters 71-148
								$this2 = null;
								if ($code === 303) {
									#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:58: characters 87-117
									$o = \Reflect::copy($options);
									#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:58: characters 118-132
									$o->method = "GET";
									#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:58: characters 71-148
									$this2 = $o;
								} else {
									$this2 = $options;
								}
								#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:58: characters 35-149
								return Fetch::fetch($this1, $this2);
							})->handle($cb);
						} else {
							#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:60: characters 17-33
							$cb(Outcome::Success($res1));
						}
					} else {
						$cb(Outcome::Success($res1));
					}
				} else if ($__hx__switch === 1) {
					#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:62: characters 19-20
					$e = $res->params[0];
					#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:63: characters 7-21
					$cb(Outcome::Failure($e));
				}
			});
		});
	}

	/**
	 * @param ClientType $type
	 * 
	 * @return ClientObject
	 */
	public static function getClient ($type) {
		#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:70: lines 70-89
		if (!Fetch::$cache->exists($type)) {
			#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:71: lines 71-86
			$c = null;
			$__hx__switch = ($type->index);
			if ($__hx__switch === 0) {
				$c = new SocketClient();
			} else if ($__hx__switch === 1) {
				#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:78: characters 16-17
				$c1 = $type->params[0];
				#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:71: lines 71-86
				$c = new LocalContainerClient($c1);
			} else if ($__hx__switch === 2) {
				$c = new CurlClient();
			} else if ($__hx__switch === 3) {
				$c = new StdClient();
			} else if ($__hx__switch === 4) {
				#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:81: characters 17-18
				$c1 = $type->params[0];
				#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:71: lines 71-86
				$c = $c1;
			} else if ($__hx__switch === 5) {
				$c = new PhpClient();
			}
			#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:88: characters 4-22
			Fetch::$cache->set($type, $c);
		}
		#/home/thehunter101/.haxe/tink_http/0,10,0/src/tink/http/Fetch.hx:91: characters 10-25
		return Fetch::$cache->get($type);
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$cache = new EnumValueMap();
	}
}

Boot::registerClass(Fetch::class, 'tink.http.Fetch');
Fetch::__hx__init();
