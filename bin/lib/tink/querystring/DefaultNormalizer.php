<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace tink\querystring;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\Exception;
use \haxe\Log;
use \php\_Boot\HxString;
use \haxe\ds\StringMap;

class DefaultNormalizer implements Normalizer {
	/**
	 * @return void
	 */
	public function __construct () {
	}

	/**
	 * @param StringMap $tree
	 * @param string $key
	 * @param mixed $value
	 * @param int $depth
	 * 
	 * @return void
	 */
	public function iterate ($tree, $key, $value, $depth = 0) {
		#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:139: lines 139-271
		if ($depth === null) {
			$depth = 0;
		}
		if ($depth === 0) {
			#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:140: characters 7-27
			if ($key === "") {
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:140: characters 21-27
				return;
			}
			#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:142: characters 15-31
			$_g = HxString::indexOf($key, "[");
			#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:142: characters 33-49
			$_g1 = HxString::indexOf($key, ".");
			#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:142: characters 15-31
			if ($_g === -1) {
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:142: characters 33-49
				if ($_g1 === -1) {
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:144: characters 11-29
					$field = $key;
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:146: characters 18-29
					$_g2 = ($tree->data[$field] ?? null);
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:146: lines 146-147
					if ($_g2 === null) {
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:147: characters 24-50
						$value1 = Field::Value($value);
						$tree->data[$field] = $value1;
					} else if ($_g2->index === 1) {
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:148: characters 24-25
						$v = $_g2->params[0];
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:148: lines 148-149
						if (!Boot::equal($v, $value)) {
							#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:149: characters 18-19
							$v = $_g2;
							#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:149: characters 21-26
							throw Exception::thrown("conflict: " . ($field??'null') . " is already defined as " . \Std::string($v));
						}
					} else {
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:149: characters 18-19
						$v = $_g2;
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:149: characters 21-26
						throw Exception::thrown("conflict: " . ($field??'null') . " is already defined as " . \Std::string($v));
					}
				} else {
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:152: characters 29-30
					$i = $_g1;
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:153: characters 11-42
					$field = \mb_substr($key, 0, $i);
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:155: lines 155-164
					$sub = null;
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:155: characters 30-41
					$_g2 = ($tree->data[$field] ?? null);
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:155: lines 155-159
					if ($_g2 === null) {
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:157: characters 15-38
						$sub1 = new StringMap();
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:158: characters 15-37
						$value1 = Field::Sub($sub1);
						$tree->data[$field] = $value1;
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:155: lines 155-164
						$sub = $sub1;
					} else if ($_g2->index === 0) {
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:160: characters 22-25
						$sub1 = $_g2->params[0];
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:155: lines 155-164
						$sub = $sub1;
					} else {
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:162: characters 18-19
						$v = $_g2;
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:163: characters 15-20
						throw Exception::thrown("conflict: " . ($field??'null') . " is already defined as " . \Std::string($v));
					}
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:165: characters 11-56
					$this->iterate($sub, \mb_substr($key, $i, null), $value, $depth + 1);
				}
			} else if ($_g1 === -1) {
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:152: characters 15-16
				$i = $_g;
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:153: characters 11-42
				$field = \mb_substr($key, 0, $i);
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:155: lines 155-164
				$sub = null;
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:155: characters 30-41
				$_g2 = ($tree->data[$field] ?? null);
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:155: lines 155-159
				if ($_g2 === null) {
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:157: characters 15-38
					$sub1 = new StringMap();
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:158: characters 15-37
					$value1 = Field::Sub($sub1);
					$tree->data[$field] = $value1;
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:155: lines 155-164
					$sub = $sub1;
				} else if ($_g2->index === 0) {
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:160: characters 22-25
					$sub1 = $_g2->params[0];
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:155: lines 155-164
					$sub = $sub1;
				} else {
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:162: characters 18-19
					$v = $_g2;
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:163: characters 15-20
					throw Exception::thrown("conflict: " . ($field??'null') . " is already defined as " . \Std::string($v));
				}
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:165: characters 11-56
				$this->iterate($sub, \mb_substr($key, $i, null), $value, $depth + 1);
			} else {
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:167: characters 15-16
				$i = $_g;
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:167: characters 18-19
				$j = $_g1;
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:169: characters 11-39
				$index = ($i > $j ? $j : $i);
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:170: characters 11-46
				$field = \mb_substr($key, 0, $index);
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:172: lines 172-181
				$sub = null;
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:172: characters 30-41
				$_g = ($tree->data[$field] ?? null);
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:172: lines 172-176
				if ($_g === null) {
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:174: characters 15-38
					$sub1 = new StringMap();
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:175: characters 15-37
					$value1 = Field::Sub($sub1);
					$tree->data[$field] = $value1;
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:172: lines 172-181
					$sub = $sub1;
				} else if ($_g->index === 0) {
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:177: characters 22-25
					$sub1 = $_g->params[0];
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:172: lines 172-181
					$sub = $sub1;
				} else {
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:179: characters 18-19
					$v = $_g;
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:180: characters 15-20
					throw Exception::thrown("conflict: " . ($field??'null') . " is already defined as " . \Std::string($v));
				}
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:182: characters 11-60
				$this->iterate($sub, \mb_substr($key, $index, null), $value, $depth + 1);
			}
		} else {
			#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:186: characters 7-53
			$bracket = HxString::charCodeAt($key, 0) === 91;
			#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:188: lines 188-269
			if ($bracket) {
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:189: characters 17-34
				$_g = HxString::indexOf($key, "][");
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:189: characters 36-53
				$_g1 = HxString::indexOf($key, "].");
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:189: characters 17-34
				if ($_g === -1) {
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:189: characters 36-53
					if ($_g1 === -1) {
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:191: characters 13-60
						$field = HxString::substring($key, 1, mb_strlen($key) - 1);
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:192: characters 20-31
						$_g2 = ($tree->data[$field] ?? null);
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:193: lines 193-194
						if ($_g2 === null) {
							#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:193: characters 26-52
							$value1 = Field::Value($value);
							$tree->data[$field] = $value1;
						} else {
							#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:194: characters 20-21
							$v = $_g2;
							#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:194: characters 23-28
							throw Exception::thrown("conflict: " . ($field??'null') . " is already defined as " . \Std::string($v));
						}
					} else {
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:197: characters 31-32
						$i = $_g1;
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:198: characters 13-47
						$field = HxString::substring($key, 1, $i);
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:200: lines 200-209
						$sub = null;
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:200: characters 32-43
						$_g2 = ($tree->data[$field] ?? null);
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:200: lines 200-204
						if ($_g2 === null) {
							#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:202: characters 17-40
							$sub1 = new StringMap();
							#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:203: characters 17-39
							$value1 = Field::Sub($sub1);
							$tree->data[$field] = $value1;
							#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:200: lines 200-209
							$sub = $sub1;
						} else if ($_g2->index === 0) {
							#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:205: characters 24-27
							$sub1 = $_g2->params[0];
							#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:200: lines 200-209
							$sub = $sub1;
						} else {
							#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:207: characters 20-21
							$v = $_g2;
							#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:208: characters 17-22
							throw Exception::thrown("conflict: " . ($field??'null') . " is already defined as " . \Std::string($v));
						}
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:210: characters 13-62
						$this->iterate($sub, \mb_substr($key, $i + 1, null), $value, $depth + 1);
					}
				} else if ($_g1 === -1) {
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:197: characters 17-18
					$i = $_g;
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:198: characters 13-47
					$field = HxString::substring($key, 1, $i);
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:200: lines 200-209
					$sub = null;
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:200: characters 32-43
					$_g2 = ($tree->data[$field] ?? null);
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:200: lines 200-204
					if ($_g2 === null) {
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:202: characters 17-40
						$sub1 = new StringMap();
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:203: characters 17-39
						$value1 = Field::Sub($sub1);
						$tree->data[$field] = $value1;
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:200: lines 200-209
						$sub = $sub1;
					} else if ($_g2->index === 0) {
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:205: characters 24-27
						$sub1 = $_g2->params[0];
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:200: lines 200-209
						$sub = $sub1;
					} else {
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:207: characters 20-21
						$v = $_g2;
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:208: characters 17-22
						throw Exception::thrown("conflict: " . ($field??'null') . " is already defined as " . \Std::string($v));
					}
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:210: characters 13-62
					$this->iterate($sub, \mb_substr($key, $i + 1, null), $value, $depth + 1);
				} else {
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:212: characters 17-18
					$i = $_g;
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:212: characters 20-21
					$j = $_g1;
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:213: characters 13-41
					$index = ($i > $j ? $j : $i);
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:214: characters 13-51
					$field = HxString::substring($key, 1, $index);
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:216: lines 216-225
					$sub = null;
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:216: characters 32-43
					$_g = ($tree->data[$field] ?? null);
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:216: lines 216-220
					if ($_g === null) {
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:218: characters 17-40
						$sub1 = new StringMap();
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:219: characters 17-39
						$value1 = Field::Sub($sub1);
						$tree->data[$field] = $value1;
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:216: lines 216-225
						$sub = $sub1;
					} else if ($_g->index === 0) {
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:221: characters 24-27
						$sub1 = $_g->params[0];
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:216: lines 216-225
						$sub = $sub1;
					} else {
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:223: characters 20-21
						$v = $_g;
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:224: characters 17-22
						throw Exception::thrown("conflict: " . ($field??'null') . " is already defined as " . \Std::string($v));
					}
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:226: characters 13-66
					$this->iterate($sub, \mb_substr($key, $index + 1, null), $value, $depth + 1);
				}
			} else {
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:229: characters 17-33
				$_g = HxString::indexOf($key, "[");
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:229: characters 35-54
				$_g1 = HxString::indexOf($key, ".", 1);
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:229: characters 17-33
				if ($_g === -1) {
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:229: characters 35-54
					if ($_g1 === -1) {
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:231: characters 13-41
						$field = \mb_substr($key, 1, null);
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:232: characters 20-31
						$_g2 = ($tree->data[$field] ?? null);
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:233: lines 233-234
						if ($_g2 === null) {
							#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:233: characters 26-52
							$value1 = Field::Value($value);
							$tree->data[$field] = $value1;
						} else {
							#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:234: characters 20-21
							$v = $_g2;
							#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:234: characters 23-28
							throw Exception::thrown("conflict: " . ($field??'null') . " is already defined as " . \Std::string($v));
						}
					} else {
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:237: characters 31-32
						$i = $_g1;
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:238: characters 13-18
						(Log::$trace)("here", new HxAnon([
							"fileName" => "tink/querystring/Parser.hx",
							"lineNumber" => 238,
							"className" => "tink.querystring.DefaultNormalizer",
							"methodName" => "iterate",
						]));
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:239: characters 13-47
						$field = HxString::substring($key, 1, $i);
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:241: lines 241-250
						$sub = null;
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:241: characters 32-43
						$_g2 = ($tree->data[$field] ?? null);
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:241: lines 241-245
						if ($_g2 === null) {
							#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:243: characters 17-40
							$sub1 = new StringMap();
							#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:244: characters 17-39
							$value1 = Field::Sub($sub1);
							$tree->data[$field] = $value1;
							#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:241: lines 241-250
							$sub = $sub1;
						} else if ($_g2->index === 0) {
							#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:246: characters 24-27
							$sub1 = $_g2->params[0];
							#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:241: lines 241-250
							$sub = $sub1;
						} else {
							#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:248: characters 20-21
							$v = $_g2;
							#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:249: characters 17-22
							throw Exception::thrown("conflict: " . ($field??'null') . " is already defined as " . \Std::string($v));
						}
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:251: characters 13-58
						$this->iterate($sub, \mb_substr($key, $i, null), $value, $depth + 1);
					}
				} else if ($_g1 === -1) {
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:237: characters 17-18
					$i = $_g;
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:238: characters 13-18
					(Log::$trace)("here", new HxAnon([
						"fileName" => "tink/querystring/Parser.hx",
						"lineNumber" => 238,
						"className" => "tink.querystring.DefaultNormalizer",
						"methodName" => "iterate",
					]));
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:239: characters 13-47
					$field = HxString::substring($key, 1, $i);
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:241: lines 241-250
					$sub = null;
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:241: characters 32-43
					$_g2 = ($tree->data[$field] ?? null);
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:241: lines 241-245
					if ($_g2 === null) {
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:243: characters 17-40
						$sub1 = new StringMap();
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:244: characters 17-39
						$value1 = Field::Sub($sub1);
						$tree->data[$field] = $value1;
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:241: lines 241-250
						$sub = $sub1;
					} else if ($_g2->index === 0) {
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:246: characters 24-27
						$sub1 = $_g2->params[0];
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:241: lines 241-250
						$sub = $sub1;
					} else {
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:248: characters 20-21
						$v = $_g2;
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:249: characters 17-22
						throw Exception::thrown("conflict: " . ($field??'null') . " is already defined as " . \Std::string($v));
					}
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:251: characters 13-58
					$this->iterate($sub, \mb_substr($key, $i, null), $value, $depth + 1);
				} else {
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:253: characters 17-18
					$i = $_g;
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:253: characters 20-21
					$j = $_g1;
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:254: characters 13-41
					$index = ($i > $j ? $j : $i);
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:255: characters 13-51
					$field = HxString::substring($key, 1, $index);
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:257: lines 257-266
					$sub = null;
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:257: characters 32-43
					$_g = ($tree->data[$field] ?? null);
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:257: lines 257-261
					if ($_g === null) {
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:259: characters 17-40
						$sub1 = new StringMap();
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:260: characters 17-39
						$value1 = Field::Sub($sub1);
						$tree->data[$field] = $value1;
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:257: lines 257-266
						$sub = $sub1;
					} else if ($_g->index === 0) {
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:262: characters 24-27
						$sub1 = $_g->params[0];
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:257: lines 257-266
						$sub = $sub1;
					} else {
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:264: characters 20-21
						$v = $_g;
						#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:265: characters 17-22
						throw Exception::thrown("conflict: " . ($field??'null') . " is already defined as " . \Std::string($v));
					}
					#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:267: characters 13-62
					$this->iterate($sub, \mb_substr($key, $index, null), $value, $depth + 1);
				}
			}
		}
	}

	/**
	 * @param object $input
	 * @param \Closure $name
	 * @param \Closure $value
	 * 
	 * @return StringMap
	 */
	public function normalize ($input, $name, $value) {
		#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:132: characters 5-29
		$root = new StringMap();
		#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:133: characters 18-23
		$entry = $input;
		while ($entry->hasNext()) {
			#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:133: characters 5-65
			$entry1 = $entry->next();
			#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:133: characters 25-65
			$this->iterate($root, $name($entry1), $value($entry1));
		}
		#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:134: characters 5-16
		return $root;
	}
}

Boot::registerClass(DefaultNormalizer::class, 'tink.querystring.DefaultNormalizer');
