<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace tink\querystring;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\Exception;
use \tink\core\_Callback\Callback_Impl_;
use \tink\core\TypedError;
use \tink\core\Outcome;
use \haxe\ds\StringMap;

class ParserBase {
	/**
	 * @var \Closure
	 */
	public $onError;
	/**
	 * @var object
	 */
	public $pos;
	/**
	 * @var Outcome
	 */
	public $result;
	/**
	 * @var StringMap
	 */
	public $root;

	/**
	 * @param \Closure $onError
	 * @param object $pos
	 * 
	 * @return void
	 */
	public function __construct ($onError = null, $pos = null) {
		#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:19: characters 5-19
		$this->pos = $pos;
		#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:20: lines 20-23
		$tmp = null;
		if ($onError === null) {
			$tmp = Boot::getInstanceClosure($this, 'abort');
		} else {
			#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:22: characters 12-13
			$v = $onError;
			#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:20: lines 20-23
			$tmp = $v;
		}
		$this->onError = $tmp;
	}

	/**
	 * @param object $e
	 * 
	 * @return void
	 */
	public function abort ($e) {
		#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:31: characters 5-10
		throw Exception::thrown($this->error("" . ($e->reason??'null') . " for " . ($e->name??'null')));
	}

	/**
	 * @param string $field
	 * @param Outcome $o
	 * 
	 * @return mixed
	 */
	public function attempt ($field, $o) {
		#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:43: lines 43-46
		$__hx__switch = ($o->index);
		if ($__hx__switch === 0) {
			#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:44: characters 20-21
			$v = $o->params[0];
			#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:44: characters 24-25
			return $v;
		} else if ($__hx__switch === 1) {
			#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:45: characters 20-21
			$e = $o->params[0];
			#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:45: characters 24-46
			return $this->fail($field, $e->message);
		}
	}

	/**
	 * @param string $reason
	 * @param mixed $data
	 * 
	 * @return TypedError
	 */
	public function error ($reason, $data = null) {
		#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:49: characters 5-66
		return TypedError::withData(422, $reason, $data, $this->pos);
	}

	/**
	 * @param string $field
	 * @param string $reason
	 * 
	 * @return mixed
	 */
	public function fail ($field, $reason) {
		#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:52: characters 5-51
		Callback_Impl_::invoke($this->onError, new HxAnon([
			"name" => $field,
			"reason" => $reason,
		]));
		#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:53: characters 5-16
		return null;
	}

	/**
	 * @param object $input
	 * @param \Closure $name
	 * @param \Closure $value
	 * 
	 * @return void
	 */
	public function init ($input, $name, $value) {
		#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:27: characters 5-70
		$this->root = (new DefaultNormalizer())->normalize($input, $name, $value);
	}

	/**
	 * @param string $name
	 * 
	 * @return mixed
	 */
	public function missing ($name) {
		#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:57: characters 5-39
		return $this->fail($name, "Missing value");
	}

	/**
	 * @param mixed $input
	 * 
	 * @return mixed
	 */
	public function parse ($input) {
		#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:34: characters 12-17
		throw Exception::thrown(TypedError::withData(501, "not implemented", $this->pos, new HxAnon([
			"fileName" => "tink/querystring/Parser.hx",
			"lineNumber" => 34,
			"className" => "tink.querystring.ParserBase",
			"methodName" => "parse",
		])));
	}

	/**
	 * @param mixed $input
	 * 
	 * @return Outcome
	 */
	public function tryParse ($input) {
		#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:38: lines 38-40
		try {
			#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:38: characters 11-32
			return Outcome::Success($this->parse($input));
		} catch(\Throwable $_g) {
			#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:39: characters 14-15
			$_g1 = Exception::caught($_g)->unwrap();
			#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:38: lines 38-40
			if (($_g1 instanceof TypedError)) {
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:39: characters 14-15
				$e = $_g1;
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:39: characters 23-33
				return Outcome::Failure($e);
			} else {
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:40: characters 14-15
				$e = $_g1;
				#/home/thehunter101/.haxe/tink_querystring/0,7,0/src/tink/querystring/Parser.hx:40: characters 25-57
				return Outcome::Failure($this->error("Parse Error", $e));
			}
		}
	}
}

Boot::registerClass(ParserBase::class, 'tink.querystring.ParserBase');
