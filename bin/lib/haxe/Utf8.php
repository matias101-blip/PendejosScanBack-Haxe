<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace haxe;

use \php\Boot;

/**
 * Since not all platforms guarantee that `String` always uses UTF-8 encoding, you
 * can use this cross-platform API to perform operations on such strings.
 */
class Utf8 {
	/**
	 * @var string
	 */
	public $__b;

	/**
	 * @param int $i
	 * 
	 * @return string
	 */
	public static function uchr ($i) {
		#/usr/share/haxe/std/php/_std/haxe/Utf8.hx:64: characters 3-77
		return \mb_convert_encoding(\pack("N", $i), "UTF-8", "UCS-4BE");
	}

	/**
	 * Allocate a new Utf8 buffer using an optional bytes size.
	 * 
	 * @param int $size
	 * 
	 * @return void
	 */
	public function __construct ($size = null) {
		#/usr/share/haxe/std/php/_std/haxe/Utf8.hx:33: characters 3-11
		$this->__b = "";
	}

	/**
	 * Add the given UTF8 character code to the buffer.
	 * 
	 * @param int $c
	 * 
	 * @return void
	 */
	public function addChar ($c) {
		#/usr/share/haxe/std/php/_std/haxe/Utf8.hx:37: characters 3-6
		$tmp = $this;
		#/usr/share/haxe/std/php/_std/haxe/Utf8.hx:37: characters 3-17
		$tmp->__b = ($tmp->__b??'null') . (Utf8::uchr($c)??'null');
	}

	/**
	 * Returns the buffer converted to a String.
	 * 
	 * @return string
	 */
	public function toString () {
		#/usr/share/haxe/std/php/_std/haxe/Utf8.hx:41: characters 3-13
		return $this->__b;
	}

	public function __toString() {
		return $this->toString();
	}
}

Boot::registerClass(Utf8::class, 'haxe.Utf8');
