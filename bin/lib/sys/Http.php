<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace sys;

use \haxe\io\_BytesData\Container;
use \php\net\SslSocket;
use \php\Boot;
use \haxe\io\BytesOutput;
use \sys\net\Socket;
use \haxe\Exception;
use \haxe\io\Output;
use \haxe\io\Eof;
use \haxe\io\BytesBuffer;
use \haxe\io\Error;
use \haxe\http\HttpBase;
use \haxe\io\Input;
use \php\_Boot\HxString;
use \sys\net\Host;
use \haxe\ds\StringMap;
use \haxe\io\Bytes;

class Http extends HttpBase {
	/**
	 * @var object
	 */
	static public $PROXY = null;

	/**
	 * @var Bytes
	 */
	public $chunk_buf;
	/**
	 * @var int
	 */
	public $chunk_size;
	/**
	 * @var float
	 */
	public $cnxTimeout;
	/**
	 * @var object
	 */
	public $file;
	/**
	 * @var bool
	 */
	public $noShutdown;
	/**
	 * @var StringMap
	 */
	public $responseHeaders;
	/**
	 * @var StringMap
	 */
	public $responseHeadersSameKey;

	/**
	 * @param string $url
	 * 
	 * @return void
	 */
	public function __construct ($url) {
		#/usr/share/haxe/std/sys/Http.hx:51: characters 3-18
		$this->cnxTimeout = 10;
		#/usr/share/haxe/std/sys/Http.hx:53: characters 3-69
		$this->noShutdown = !\function_exists("stream_socket_shutdown");
		#/usr/share/haxe/std/sys/Http.hx:55: characters 3-13
		parent::__construct($url);
	}

	/**
	 * @param bool $post
	 * @param Output $api
	 * @param Socket $sock
	 * @param string $method
	 * 
	 * @return void
	 */
	public function customRequest ($post, $api, $sock = null, $method = null) {
		#/usr/share/haxe/std/sys/Http.hx:93: characters 3-31
		$this->responseAsString = null;
		#/usr/share/haxe/std/sys/Http.hx:94: characters 3-28
		$this->responseBytes = null;
		#/usr/share/haxe/std/sys/Http.hx:95: characters 3-72
		$url_regexp = new \EReg("^(https?://)?([a-zA-Z\\.0-9_-]+)(:[0-9]+)?(.*)\$", "");
		#/usr/share/haxe/std/sys/Http.hx:96: lines 96-99
		if (!$url_regexp->match($this->url)) {
			#/usr/share/haxe/std/sys/Http.hx:97: characters 4-26
			$this->onError("Invalid URL");
			#/usr/share/haxe/std/sys/Http.hx:98: characters 4-10
			return;
		}
		#/usr/share/haxe/std/sys/Http.hx:100: characters 3-54
		$secure = $url_regexp->matched(1) === "https://";
		#/usr/share/haxe/std/sys/Http.hx:101: lines 101-120
		if ($sock === null) {
			#/usr/share/haxe/std/sys/Http.hx:102: lines 102-118
			if ($secure) {
				#/usr/share/haxe/std/sys/Http.hx:104: characters 5-35
				$sock = new SslSocket();
			} else {
				#/usr/share/haxe/std/sys/Http.hx:117: characters 5-24
				$sock = new Socket();
			}
			#/usr/share/haxe/std/sys/Http.hx:119: characters 4-31
			$sock->setTimeout($this->cnxTimeout);
		}
		#/usr/share/haxe/std/sys/Http.hx:121: characters 3-36
		$host = $url_regexp->matched(2);
		#/usr/share/haxe/std/sys/Http.hx:122: characters 3-42
		$portString = $url_regexp->matched(3);
		#/usr/share/haxe/std/sys/Http.hx:123: characters 3-39
		$request = $url_regexp->matched(4);
		#/usr/share/haxe/std/sys/Http.hx:127: lines 127-129
		if (\mb_substr($request, 0, 1) !== "/") {
			#/usr/share/haxe/std/sys/Http.hx:128: characters 4-27
			$request = "/" . ($request??'null');
		}
		#/usr/share/haxe/std/sys/Http.hx:130: characters 3-139
		$port = (($portString === null) || ($portString === "") ? ($secure ? 443 : 80) : \Std::parseInt(\mb_substr($portString, 1, mb_strlen($portString) - 1)));
		#/usr/share/haxe/std/sys/Http.hx:132: characters 3-34
		$multipart = $this->file !== null;
		#/usr/share/haxe/std/sys/Http.hx:133: characters 3-23
		$boundary = null;
		#/usr/share/haxe/std/sys/Http.hx:134: characters 3-18
		$uri = null;
		#/usr/share/haxe/std/sys/Http.hx:135: lines 135-175
		if ($multipart) {
			#/usr/share/haxe/std/sys/Http.hx:136: characters 4-15
			$post = true;
			#/usr/share/haxe/std/sys/Http.hx:137: lines 137-140
			$boundary = \Std::string(\mt_rand(0, 999)) . \Std::string(\mt_rand(0, 999)) . \Std::string(\mt_rand(0, 999)) . \Std::string(\mt_rand(0, 999));
			#/usr/share/haxe/std/sys/Http.hx:141: lines 141-142
			while (mb_strlen($boundary) < 38) {
				#/usr/share/haxe/std/sys/Http.hx:142: characters 5-30
				$boundary = "-" . ($boundary??'null');
			}
			#/usr/share/haxe/std/sys/Http.hx:143: characters 4-28
			$b = new \StringBuf();
			#/usr/share/haxe/std/sys/Http.hx:144: lines 144-155
			$_g = 0;
			$_g1 = $this->params;
			while ($_g < $_g1->length) {
				#/usr/share/haxe/std/sys/Http.hx:144: characters 9-10
				$p = ($_g1->arr[$_g] ?? null);
				#/usr/share/haxe/std/sys/Http.hx:144: lines 144-155
				++$_g;
				#/usr/share/haxe/std/sys/Http.hx:145: characters 5-16
				$b->add("--");
				#/usr/share/haxe/std/sys/Http.hx:146: characters 5-20
				$b->add($boundary);
				#/usr/share/haxe/std/sys/Http.hx:147: characters 5-18
				$b->add("\x0D\x0A");
				#/usr/share/haxe/std/sys/Http.hx:148: characters 5-52
				$b->add("Content-Disposition: form-data; name=\"");
				#/usr/share/haxe/std/sys/Http.hx:149: characters 5-18
				$b->add($p->name);
				#/usr/share/haxe/std/sys/Http.hx:150: characters 5-15
				$b->add("\"");
				#/usr/share/haxe/std/sys/Http.hx:151: characters 5-18
				$b->add("\x0D\x0A");
				#/usr/share/haxe/std/sys/Http.hx:152: characters 5-18
				$b->add("\x0D\x0A");
				#/usr/share/haxe/std/sys/Http.hx:153: characters 5-19
				$b->add($p->value);
				#/usr/share/haxe/std/sys/Http.hx:154: characters 5-18
				$b->add("\x0D\x0A");
			}
			#/usr/share/haxe/std/sys/Http.hx:156: characters 4-15
			$b->add("--");
			#/usr/share/haxe/std/sys/Http.hx:157: characters 4-19
			$b->add($boundary);
			#/usr/share/haxe/std/sys/Http.hx:158: characters 4-17
			$b->add("\x0D\x0A");
			#/usr/share/haxe/std/sys/Http.hx:159: characters 4-51
			$b->add("Content-Disposition: form-data; name=\"");
			#/usr/share/haxe/std/sys/Http.hx:160: characters 4-21
			$b->add($this->file->param);
			#/usr/share/haxe/std/sys/Http.hx:161: characters 4-26
			$b->add("\"; filename=\"");
			#/usr/share/haxe/std/sys/Http.hx:162: characters 4-24
			$b->add($this->file->filename);
			#/usr/share/haxe/std/sys/Http.hx:163: characters 4-14
			$b->add("\"");
			#/usr/share/haxe/std/sys/Http.hx:164: characters 4-17
			$b->add("\x0D\x0A");
			#/usr/share/haxe/std/sys/Http.hx:165: characters 4-61
			$b->add("Content-Type: " . ($this->file->mimeType??'null') . "\x0D\x0A" . "\x0D\x0A");
			#/usr/share/haxe/std/sys/Http.hx:166: characters 4-22
			$uri = $b->b;
		} else {
			#/usr/share/haxe/std/sys/Http.hx:168: lines 168-174
			$_g = 0;
			$_g1 = $this->params;
			while ($_g < $_g1->length) {
				#/usr/share/haxe/std/sys/Http.hx:168: characters 9-10
				$p = ($_g1->arr[$_g] ?? null);
				#/usr/share/haxe/std/sys/Http.hx:168: lines 168-174
				++$_g;
				#/usr/share/haxe/std/sys/Http.hx:169: lines 169-172
				if ($uri === null) {
					#/usr/share/haxe/std/sys/Http.hx:170: characters 6-14
					$uri = "";
				} else {
					#/usr/share/haxe/std/sys/Http.hx:172: characters 6-16
					$uri = ($uri??'null') . "&";
				}
				#/usr/share/haxe/std/sys/Http.hx:173: characters 5-85
				$uri = ($uri??'null') . (\rawurlencode($p->name)??'null') . "=" . (\rawurlencode("" . ($p->value??'null'))??'null');
			}
		}
		#/usr/share/haxe/std/sys/Http.hx:177: characters 3-29
		$b = new BytesOutput();
		#/usr/share/haxe/std/sys/Http.hx:178: lines 178-184
		if ($method !== null) {
			#/usr/share/haxe/std/sys/Http.hx:179: characters 4-25
			$b->writeString($method);
			#/usr/share/haxe/std/sys/Http.hx:180: characters 4-22
			$b->writeString(" ");
		} else if ($post) {
			#/usr/share/haxe/std/sys/Http.hx:182: characters 4-26
			$b->writeString("POST ");
		} else {
			#/usr/share/haxe/std/sys/Http.hx:184: characters 4-25
			$b->writeString("GET ");
		}
		#/usr/share/haxe/std/sys/Http.hx:186: lines 186-193
		if (Http::$PROXY !== null) {
			#/usr/share/haxe/std/sys/Http.hx:187: characters 4-28
			$b->writeString("http://");
			#/usr/share/haxe/std/sys/Http.hx:188: characters 4-23
			$b->writeString($host);
			#/usr/share/haxe/std/sys/Http.hx:189: lines 189-192
			if ($port !== 80) {
				#/usr/share/haxe/std/sys/Http.hx:190: characters 5-23
				$b->writeString(":");
				#/usr/share/haxe/std/sys/Http.hx:191: characters 5-27
				$b->writeString("" . ($port??'null'));
			}
		}
		#/usr/share/haxe/std/sys/Http.hx:194: characters 3-25
		$b->writeString($request);
		#/usr/share/haxe/std/sys/Http.hx:196: lines 196-202
		if (!$post && ($uri !== null)) {
			#/usr/share/haxe/std/sys/Http.hx:197: lines 197-200
			if (HxString::indexOf($request, "?", 0) >= 0) {
				#/usr/share/haxe/std/sys/Http.hx:198: characters 5-23
				$b->writeString("&");
			} else {
				#/usr/share/haxe/std/sys/Http.hx:200: characters 5-23
				$b->writeString("?");
			}
			#/usr/share/haxe/std/sys/Http.hx:201: characters 4-22
			$b->writeString($uri);
		}
		#/usr/share/haxe/std/sys/Http.hx:203: characters 3-55
		$b->writeString(" HTTP/1.1\x0D\x0AHost: " . ($host??'null') . "\x0D\x0A");
		#/usr/share/haxe/std/sys/Http.hx:204: lines 204-207
		if ($this->postData !== null) {
			#/usr/share/haxe/std/sys/Http.hx:205: characters 16-40
			$s = $this->postData;
			$tmp = \strlen($s);
			#/usr/share/haxe/std/sys/Http.hx:205: characters 4-40
			$this->postBytes = new Bytes($tmp, new Container($s));
			#/usr/share/haxe/std/sys/Http.hx:206: characters 4-19
			$this->postData = null;
		}
		#/usr/share/haxe/std/sys/Http.hx:208: lines 208-225
		if ($this->postBytes !== null) {
			#/usr/share/haxe/std/sys/Http.hx:209: characters 4-65
			$b->writeString("Content-Length: " . ($this->postBytes->length??'null') . "\x0D\x0A");
		} else if ($post && ($uri !== null)) {
			#/usr/share/haxe/std/sys/Http.hx:211: lines 211-220
			if ($multipart || !\Lambda::exists($this->headers, function ($h) {
				#/usr/share/haxe/std/sys/Http.hx:211: characters 57-88
				return $h->name === "Content-Type";
			})) {
				#/usr/share/haxe/std/sys/Http.hx:212: characters 5-36
				$b->writeString("Content-Type: ");
				#/usr/share/haxe/std/sys/Http.hx:213: lines 213-218
				if ($multipart) {
					#/usr/share/haxe/std/sys/Http.hx:214: characters 6-42
					$b->writeString("multipart/form-data");
					#/usr/share/haxe/std/sys/Http.hx:215: characters 6-34
					$b->writeString("; boundary=");
					#/usr/share/haxe/std/sys/Http.hx:216: characters 6-29
					$b->writeString($boundary);
				} else {
					#/usr/share/haxe/std/sys/Http.hx:218: characters 6-56
					$b->writeString("application/x-www-form-urlencoded");
				}
				#/usr/share/haxe/std/sys/Http.hx:219: characters 5-26
				$b->writeString("\x0D\x0A");
			}
			#/usr/share/haxe/std/sys/Http.hx:221: lines 221-224
			if ($multipart) {
				#/usr/share/haxe/std/sys/Http.hx:222: characters 5-96
				$b->writeString("Content-Length: " . (mb_strlen($uri) + $this->file->size + mb_strlen($boundary) + 6) . "\x0D\x0A");
			} else {
				#/usr/share/haxe/std/sys/Http.hx:224: characters 5-60
				$b->writeString("Content-Length: " . (mb_strlen($uri)??'null') . "\x0D\x0A");
			}
		}
		#/usr/share/haxe/std/sys/Http.hx:226: characters 3-41
		$b->writeString("Connection: close\x0D\x0A");
		#/usr/share/haxe/std/sys/Http.hx:227: lines 227-232
		$_g = 0;
		$_g1 = $this->headers;
		while ($_g < $_g1->length) {
			#/usr/share/haxe/std/sys/Http.hx:227: characters 8-9
			$h = ($_g1->arr[$_g] ?? null);
			#/usr/share/haxe/std/sys/Http.hx:227: lines 227-232
			++$_g;
			#/usr/share/haxe/std/sys/Http.hx:228: characters 4-25
			$b->writeString($h->name);
			#/usr/share/haxe/std/sys/Http.hx:229: characters 4-23
			$b->writeString(": ");
			#/usr/share/haxe/std/sys/Http.hx:230: characters 4-26
			$b->writeString($h->value);
			#/usr/share/haxe/std/sys/Http.hx:231: characters 4-25
			$b->writeString("\x0D\x0A");
		}
		#/usr/share/haxe/std/sys/Http.hx:233: characters 3-24
		$b->writeString("\x0D\x0A");
		#/usr/share/haxe/std/sys/Http.hx:234: lines 234-237
		if ($this->postBytes !== null) {
			#/usr/share/haxe/std/sys/Http.hx:235: characters 4-52
			$b->writeFullBytes($this->postBytes, 0, $this->postBytes->length);
		} else if ($post && ($uri !== null)) {
			#/usr/share/haxe/std/sys/Http.hx:237: characters 4-22
			$b->writeString($uri);
		}
		#/usr/share/haxe/std/sys/Http.hx:238: lines 238-254
		try {
			#/usr/share/haxe/std/sys/Http.hx:239: lines 239-242
			if (Http::$PROXY !== null) {
				#/usr/share/haxe/std/sys/Http.hx:240: characters 5-61
				$sock->connect(new Host(Http::$PROXY->host), Http::$PROXY->port);
			} else {
				#/usr/share/haxe/std/sys/Http.hx:242: characters 5-39
				$sock->connect(new Host($host), $port);
			}
			#/usr/share/haxe/std/sys/Http.hx:243: lines 243-246
			if ($multipart) {
				#/usr/share/haxe/std/sys/Http.hx:244: characters 5-53
				$this->writeBody($b, $this->file->io, $this->file->size, $boundary, $sock);
			} else {
				#/usr/share/haxe/std/sys/Http.hx:246: characters 5-38
				$this->writeBody($b, null, 0, null, $sock);
			}
			#/usr/share/haxe/std/sys/Http.hx:247: characters 4-31
			$this->readHttpResponse($api, $sock);
			#/usr/share/haxe/std/sys/Http.hx:248: characters 4-16
			$sock->close();
		} catch(\Throwable $_g) {
			#/usr/share/haxe/std/sys/Http.hx:249: characters 12-13
			$e = Exception::caught($_g)->unwrap();
			#/usr/share/haxe/std/sys/Http.hx:250: lines 250-252
			try {
				#/usr/share/haxe/std/sys/Http.hx:251: characters 5-17
				$sock->close();
			} catch(\Throwable $_g) {
			}
			#/usr/share/haxe/std/sys/Http.hx:253: characters 4-26
			$this->onError(\Std::string($e));
		}
	}

	/**
	 * @param \EReg $chunk_re
	 * @param Output $api
	 * @param Bytes $buf
	 * @param int $len
	 * 
	 * @return bool
	 */
	public function readChunk ($chunk_re, $api, $buf, $len) {
		#/usr/share/haxe/std/sys/Http.hx:462: lines 462-496
		if ($this->chunk_size === null) {
			#/usr/share/haxe/std/sys/Http.hx:463: lines 463-470
			if ($this->chunk_buf !== null) {
				#/usr/share/haxe/std/sys/Http.hx:464: characters 5-39
				$b = new BytesBuffer();
				#/usr/share/haxe/std/sys/Http.hx:465: characters 5-21
				$b->b = ($b->b . $this->chunk_buf->b->s);
				#/usr/share/haxe/std/sys/Http.hx:466: characters 5-28
				if (($len < 0) || ($len > $buf->length)) {
					throw Exception::thrown(Error::OutsideBounds());
				} else {
					$left = $b->b;
					$this_s = \substr($buf->b->s, 0, $len);
					$b->b = ($left . $this_s);
				}
				#/usr/share/haxe/std/sys/Http.hx:467: characters 5-8
				$buf = $b->getBytes();
				#/usr/share/haxe/std/sys/Http.hx:468: characters 5-28
				$len += $this->chunk_buf->length;
				#/usr/share/haxe/std/sys/Http.hx:469: characters 5-14
				$this->chunk_buf = null;
			}
			#/usr/share/haxe/std/sys/Http.hx:474: lines 474-488
			if ($chunk_re->match($buf->toString())) {
				#/usr/share/haxe/std/sys/Http.hx:476: characters 5-35
				$p = $chunk_re->matchedPos();
				#/usr/share/haxe/std/sys/Http.hx:477: lines 477-487
				if ($p->len <= $len) {
					#/usr/share/haxe/std/sys/Http.hx:478: characters 6-37
					$cstr = $chunk_re->matched(1);
					#/usr/share/haxe/std/sys/Http.hx:479: characters 6-16
					$this->chunk_size = \Std::parseInt("0x" . ($cstr??'null'));
					#/usr/share/haxe/std/sys/Http.hx:480: lines 480-484
					if ($this->chunk_size === 0) {
						#/usr/share/haxe/std/sys/Http.hx:481: characters 7-17
						$this->chunk_size = null;
						#/usr/share/haxe/std/sys/Http.hx:482: characters 7-16
						$this->chunk_buf = null;
						#/usr/share/haxe/std/sys/Http.hx:483: characters 7-19
						return false;
					}
					#/usr/share/haxe/std/sys/Http.hx:485: characters 6-18
					$len -= $p->len;
					#/usr/share/haxe/std/sys/Http.hx:486: characters 38-57
					$pos = $p->len;
					$tmp = null;
					if (($pos < 0) || ($len < 0) || (($pos + $len) > $buf->length)) {
						throw Exception::thrown(Error::OutsideBounds());
					} else {
						$tmp = new Bytes($len, new Container(\substr($buf->b->s, $pos, $len)));
					}
					#/usr/share/haxe/std/sys/Http.hx:486: characters 6-63
					return $this->readChunk($chunk_re, $api, $tmp, $len);
				}
			}
			#/usr/share/haxe/std/sys/Http.hx:490: lines 490-493
			if ($len > 10) {
				#/usr/share/haxe/std/sys/Http.hx:491: characters 5-29
				$this->onError("Invalid chunk");
				#/usr/share/haxe/std/sys/Http.hx:492: characters 5-17
				return false;
			}
			#/usr/share/haxe/std/sys/Http.hx:494: characters 16-31
			$tmp = null;
			if (($len < 0) || ($len > $buf->length)) {
				throw Exception::thrown(Error::OutsideBounds());
			} else {
				$tmp = new Bytes($len, new Container(\substr($buf->b->s, 0, $len)));
			}
			#/usr/share/haxe/std/sys/Http.hx:494: characters 4-13
			$this->chunk_buf = $tmp;
			#/usr/share/haxe/std/sys/Http.hx:495: characters 4-15
			return true;
		}
		#/usr/share/haxe/std/sys/Http.hx:498: lines 498-502
		if ($this->chunk_size > $len) {
			#/usr/share/haxe/std/sys/Http.hx:499: characters 4-21
			$this->chunk_size -= $len;
			#/usr/share/haxe/std/sys/Http.hx:500: characters 4-31
			$api->writeBytes($buf, 0, $len);
			#/usr/share/haxe/std/sys/Http.hx:501: characters 4-15
			return true;
		}
		#/usr/share/haxe/std/sys/Http.hx:503: characters 3-28
		$end = $this->chunk_size + 2;
		#/usr/share/haxe/std/sys/Http.hx:504: lines 504-512
		if ($len >= $end) {
			#/usr/share/haxe/std/sys/Http.hx:505: lines 505-506
			if ($this->chunk_size > 0) {
				#/usr/share/haxe/std/sys/Http.hx:506: characters 5-39
				$api->writeBytes($buf, 0, $this->chunk_size);
			}
			#/usr/share/haxe/std/sys/Http.hx:507: characters 4-14
			$len -= $end;
			#/usr/share/haxe/std/sys/Http.hx:508: characters 4-14
			$this->chunk_size = null;
			#/usr/share/haxe/std/sys/Http.hx:509: lines 509-510
			if ($len === 0) {
				#/usr/share/haxe/std/sys/Http.hx:510: characters 5-16
				return true;
			}
			#/usr/share/haxe/std/sys/Http.hx:511: characters 36-53
			$tmp = null;
			if (($end < 0) || ($len < 0) || (($end + $len) > $buf->length)) {
				throw Exception::thrown(Error::OutsideBounds());
			} else {
				$tmp = new Bytes($len, new Container(\substr($buf->b->s, $end, $len)));
			}
			#/usr/share/haxe/std/sys/Http.hx:511: characters 4-59
			return $this->readChunk($chunk_re, $api, $tmp, $len);
		}
		#/usr/share/haxe/std/sys/Http.hx:513: lines 513-514
		if ($this->chunk_size > 0) {
			#/usr/share/haxe/std/sys/Http.hx:514: characters 4-38
			$api->writeBytes($buf, 0, $this->chunk_size);
		}
		#/usr/share/haxe/std/sys/Http.hx:515: characters 3-20
		$this->chunk_size -= $len;
		#/usr/share/haxe/std/sys/Http.hx:516: characters 3-14
		return true;
	}

	/**
	 * @param Output $api
	 * @param Socket $sock
	 * 
	 * @return void
	 */
	public function readHttpResponse ($api, $sock) {
		#/usr/share/haxe/std/sys/Http.hx:301: characters 3-37
		$b = new BytesBuffer();
		#/usr/share/haxe/std/sys/Http.hx:302: characters 3-13
		$k = 4;
		#/usr/share/haxe/std/sys/Http.hx:303: characters 3-34
		$s = Bytes::alloc(4);
		#/usr/share/haxe/std/sys/Http.hx:304: characters 3-30
		$sock->setTimeout($this->cnxTimeout);
		#/usr/share/haxe/std/sys/Http.hx:305: lines 305-365
		while (true) {
			#/usr/share/haxe/std/sys/Http.hx:306: characters 4-14
			$p = 0;
			#/usr/share/haxe/std/sys/Http.hx:307: lines 307-312
			while ($p !== $k) {
				#/usr/share/haxe/std/sys/Http.hx:308: lines 308-311
				try {
					#/usr/share/haxe/std/sys/Http.hx:309: characters 6-44
					$p += $sock->input->readBytes($s, $p, $k - $p);
				} catch(\Throwable $_g) {
					#/usr/share/haxe/std/sys/Http.hx:308: lines 308-311
					if (!(Exception::caught($_g)->unwrap() instanceof Eof)) {
						throw $_g;
					}
				}
			}
			#/usr/share/haxe/std/sys/Http.hx:313: characters 4-23
			if (($k < 0) || ($k > $s->length)) {
				throw Exception::thrown(Error::OutsideBounds());
			} else {
				$left = $b->b;
				$this_s = \substr($s->b->s, 0, $k);
				$b->b = ($left . $this_s);
			}
			#/usr/share/haxe/std/sys/Http.hx:314: lines 314-364
			if ($k === 1) {
				#/usr/share/haxe/std/sys/Http.hx:316: characters 6-23
				$c = \ord($s->b->s[0]);
				#/usr/share/haxe/std/sys/Http.hx:317: lines 317-318
				if ($c === 10) {
					#/usr/share/haxe/std/sys/Http.hx:318: characters 7-12
					break;
				}
				#/usr/share/haxe/std/sys/Http.hx:319: lines 319-322
				if ($c === 13) {
					#/usr/share/haxe/std/sys/Http.hx:320: characters 7-8
					$k = 3;
				} else {
					#/usr/share/haxe/std/sys/Http.hx:322: characters 7-8
					$k = 4;
				}
			} else if ($k === 2) {
				#/usr/share/haxe/std/sys/Http.hx:324: characters 6-23
				$c1 = \ord($s->b->s[1]);
				#/usr/share/haxe/std/sys/Http.hx:325: lines 325-332
				if ($c1 === 10) {
					#/usr/share/haxe/std/sys/Http.hx:326: lines 326-327
					if (\ord($s->b->s[0]) === 13) {
						#/usr/share/haxe/std/sys/Http.hx:327: characters 8-13
						break;
					}
					#/usr/share/haxe/std/sys/Http.hx:328: characters 7-8
					$k = 4;
				} else if ($c1 === 13) {
					#/usr/share/haxe/std/sys/Http.hx:330: characters 7-8
					$k = 3;
				} else {
					#/usr/share/haxe/std/sys/Http.hx:332: characters 7-8
					$k = 4;
				}
			} else if ($k === 3) {
				#/usr/share/haxe/std/sys/Http.hx:334: characters 6-23
				$c2 = \ord($s->b->s[2]);
				#/usr/share/haxe/std/sys/Http.hx:335: lines 335-348
				if ($c2 === 10) {
					#/usr/share/haxe/std/sys/Http.hx:336: lines 336-341
					if (\ord($s->b->s[1]) !== 13) {
						#/usr/share/haxe/std/sys/Http.hx:337: characters 8-9
						$k = 4;
					} else if (\ord($s->b->s[0]) !== 10) {
						#/usr/share/haxe/std/sys/Http.hx:339: characters 8-9
						$k = 2;
					} else {
						#/usr/share/haxe/std/sys/Http.hx:341: characters 8-13
						break;
					}
				} else if ($c2 === 13) {
					#/usr/share/haxe/std/sys/Http.hx:343: lines 343-346
					if ((\ord($s->b->s[1]) !== 10) || (\ord($s->b->s[0]) !== 13)) {
						#/usr/share/haxe/std/sys/Http.hx:344: characters 8-9
						$k = 1;
					} else {
						#/usr/share/haxe/std/sys/Http.hx:346: characters 8-9
						$k = 3;
					}
				} else {
					#/usr/share/haxe/std/sys/Http.hx:348: characters 7-8
					$k = 4;
				}
			} else if ($k === 4) {
				#/usr/share/haxe/std/sys/Http.hx:350: characters 6-23
				$c3 = \ord($s->b->s[3]);
				#/usr/share/haxe/std/sys/Http.hx:351: lines 351-363
				if ($c3 === 10) {
					#/usr/share/haxe/std/sys/Http.hx:352: lines 352-357
					if (\ord($s->b->s[2]) !== 13) {
						#/usr/share/haxe/std/sys/Http.hx:353: characters 8-16
						continue;
					} else if ((\ord($s->b->s[1]) !== 10) || (\ord($s->b->s[0]) !== 13)) {
						#/usr/share/haxe/std/sys/Http.hx:355: characters 8-9
						$k = 2;
					} else {
						#/usr/share/haxe/std/sys/Http.hx:357: characters 8-13
						break;
					}
				} else if ($c3 === 13) {
					#/usr/share/haxe/std/sys/Http.hx:359: lines 359-362
					if ((\ord($s->b->s[2]) !== 10) || (\ord($s->b->s[1]) !== 13)) {
						#/usr/share/haxe/std/sys/Http.hx:360: characters 8-9
						$k = 3;
					} else {
						#/usr/share/haxe/std/sys/Http.hx:362: characters 8-9
						$k = 1;
					}
				}
			}
		};
		#/usr/share/haxe/std/sys/Http.hx:369: characters 3-55
		$headers = HxString::split($b->getBytes()->toString(), "\x0D\x0A");
		#/usr/share/haxe/std/sys/Http.hx:371: characters 18-33
		if ($headers->length > 0) {
			$headers->length--;
		}
		#/usr/share/haxe/std/sys/Http.hx:371: characters 3-34
		$response = \array_shift($headers->arr);
		#/usr/share/haxe/std/sys/Http.hx:372: characters 3-32
		$rp = HxString::split($response, " ");
		#/usr/share/haxe/std/sys/Http.hx:373: characters 3-36
		$status = \Std::parseInt(($rp->arr[1] ?? null));
		#/usr/share/haxe/std/sys/Http.hx:374: lines 374-375
		if (($status === 0) || ($status === null)) {
			#/usr/share/haxe/std/sys/Http.hx:375: characters 4-9
			throw Exception::thrown("Response status error");
		}
		#/usr/share/haxe/std/sys/Http.hx:378: characters 3-16
		if ($headers->length > 0) {
			$headers->length--;
		}
		\array_pop($headers->arr);
		#/usr/share/haxe/std/sys/Http.hx:379: characters 3-16
		if ($headers->length > 0) {
			$headers->length--;
		}
		\array_pop($headers->arr);
		#/usr/share/haxe/std/sys/Http.hx:380: characters 3-18
		$this->responseHeaders = new StringMap();
		#/usr/share/haxe/std/sys/Http.hx:381: characters 3-19
		$size = null;
		#/usr/share/haxe/std/sys/Http.hx:382: characters 3-23
		$chunked = false;
		#/usr/share/haxe/std/sys/Http.hx:383: lines 383-411
		$_g = 0;
		while ($_g < $headers->length) {
			#/usr/share/haxe/std/sys/Http.hx:383: characters 8-13
			$hline = ($headers->arr[$_g] ?? null);
			#/usr/share/haxe/std/sys/Http.hx:383: lines 383-411
			++$_g;
			#/usr/share/haxe/std/sys/Http.hx:384: characters 4-30
			$a = HxString::split($hline, ": ");
			#/usr/share/haxe/std/sys/Http.hx:385: characters 16-25
			if ($a->length > 0) {
				$a->length--;
			}
			#/usr/share/haxe/std/sys/Http.hx:385: characters 4-26
			$hname = \array_shift($a->arr);
			#/usr/share/haxe/std/sys/Http.hx:386: characters 4-57
			$hval = ($a->length === 1 ? ($a->arr[0] ?? null) : $a->join(": "));
			#/usr/share/haxe/std/sys/Http.hx:387: characters 11-53
			$hval = \ltrim(\rtrim($hval));
			#/usr/share/haxe/std/sys/Http.hx:390: characters 5-52
			$previousValue = ($this->responseHeaders->data[$hname] ?? null);
			#/usr/share/haxe/std/sys/Http.hx:391: lines 391-402
			if ($previousValue !== null) {
				#/usr/share/haxe/std/sys/Http.hx:392: lines 392-394
				if ($this->responseHeadersSameKey === null) {
					#/usr/share/haxe/std/sys/Http.hx:393: characters 7-29
					$this->responseHeadersSameKey = new StringMap();
				}
				#/usr/share/haxe/std/sys/Http.hx:395: characters 6-52
				$array = ($this->responseHeadersSameKey->data[$hname] ?? null);
				#/usr/share/haxe/std/sys/Http.hx:396: lines 396-400
				if ($array === null) {
					#/usr/share/haxe/std/sys/Http.hx:397: characters 7-12
					$array = new \Array_hx();
					#/usr/share/haxe/std/sys/Http.hx:398: characters 7-32
					$array->arr[$array->length++] = $previousValue;
					#/usr/share/haxe/std/sys/Http.hx:399: characters 7-47
					$this->responseHeadersSameKey->data[$hname] = $array;
				}
				#/usr/share/haxe/std/sys/Http.hx:401: characters 6-22
				$array->arr[$array->length++] = $hval;
			}
			#/usr/share/haxe/std/sys/Http.hx:404: characters 4-36
			$this->responseHeaders->data[$hname] = $hval;
			#/usr/share/haxe/std/sys/Http.hx:405: characters 12-31
			$__hx__switch = (\mb_strtolower($hname));
			if ($__hx__switch === "content-length") {
				#/usr/share/haxe/std/sys/Http.hx:407: characters 6-10
				$size = \Std::parseInt($hval);
			} else if ($__hx__switch === "transfer-encoding") {
				#/usr/share/haxe/std/sys/Http.hx:409: characters 6-13
				$chunked = \mb_strtolower($hval) === "chunked";
			}
		}
		#/usr/share/haxe/std/sys/Http.hx:413: characters 3-19
		$this->onStatus($status);
		#/usr/share/haxe/std/sys/Http.hx:415: characters 3-46
		$chunk_re = new \EReg("^([0-9A-Fa-f]+)[ ]*\x0D\x0A", "m");
		#/usr/share/haxe/std/sys/Http.hx:416: characters 3-13
		$this->chunk_size = null;
		#/usr/share/haxe/std/sys/Http.hx:417: characters 3-12
		$this->chunk_buf = null;
		#/usr/share/haxe/std/sys/Http.hx:419: characters 3-22
		$bufsize = 1024;
		#/usr/share/haxe/std/sys/Http.hx:420: characters 3-42
		$buf = Bytes::alloc($bufsize);
		#/usr/share/haxe/std/sys/Http.hx:421: lines 421-453
		if ($chunked) {
			#/usr/share/haxe/std/sys/Http.hx:422: lines 422-430
			try {
				#/usr/share/haxe/std/sys/Http.hx:423: lines 423-427
				while (true) {
					#/usr/share/haxe/std/sys/Http.hx:424: characters 6-54
					$len = $sock->input->readBytes($buf, 0, $bufsize);
					#/usr/share/haxe/std/sys/Http.hx:425: lines 425-426
					if (!$this->readChunk($chunk_re, $api, $buf, $len)) {
						#/usr/share/haxe/std/sys/Http.hx:426: characters 7-12
						break;
					}
				}
			} catch(\Throwable $_g) {
				#/usr/share/haxe/std/sys/Http.hx:422: lines 422-430
				if ((Exception::caught($_g)->unwrap() instanceof Eof)) {
					#/usr/share/haxe/std/sys/Http.hx:429: characters 5-10
					throw Exception::thrown("Transfer aborted");
				} else {
					#/usr/share/haxe/std/sys/Http.hx:422: lines 422-430
					throw $_g;
				}
			}
		} else if ($size === null) {
			#/usr/share/haxe/std/sys/Http.hx:432: lines 432-433
			if (!$this->noShutdown) {
				#/usr/share/haxe/std/sys/Http.hx:433: characters 5-31
				$sock->shutdown(false, true);
			}
			#/usr/share/haxe/std/sys/Http.hx:434: lines 434-441
			try {
				#/usr/share/haxe/std/sys/Http.hx:435: lines 435-440
				while (true) {
					#/usr/share/haxe/std/sys/Http.hx:436: characters 6-54
					$len = $sock->input->readBytes($buf, 0, $bufsize);
					#/usr/share/haxe/std/sys/Http.hx:437: lines 437-438
					if ($len === 0) {
						#/usr/share/haxe/std/sys/Http.hx:438: characters 7-12
						break;
					}
					#/usr/share/haxe/std/sys/Http.hx:439: characters 6-33
					$api->writeBytes($buf, 0, $len);
				}
			} catch(\Throwable $_g) {
				#/usr/share/haxe/std/sys/Http.hx:434: lines 434-441
				if (!(Exception::caught($_g)->unwrap() instanceof Eof)) {
					throw $_g;
				}
			}
		} else {
			#/usr/share/haxe/std/sys/Http.hx:443: characters 4-21
			$api->prepare($size);
			#/usr/share/haxe/std/sys/Http.hx:444: lines 444-452
			try {
				#/usr/share/haxe/std/sys/Http.hx:445: lines 445-449
				while ($size > 0) {
					#/usr/share/haxe/std/sys/Http.hx:446: characters 6-84
					$len = $sock->input->readBytes($buf, 0, ($size > $bufsize ? $bufsize : $size));
					#/usr/share/haxe/std/sys/Http.hx:447: characters 6-33
					$api->writeBytes($buf, 0, $len);
					#/usr/share/haxe/std/sys/Http.hx:448: characters 6-17
					$size -= $len;
				}
			} catch(\Throwable $_g) {
				#/usr/share/haxe/std/sys/Http.hx:444: lines 444-452
				if ((Exception::caught($_g)->unwrap() instanceof Eof)) {
					#/usr/share/haxe/std/sys/Http.hx:451: characters 5-10
					throw Exception::thrown("Transfer aborted");
				} else {
					#/usr/share/haxe/std/sys/Http.hx:444: lines 444-452
					throw $_g;
				}
			}
		}
		#/usr/share/haxe/std/sys/Http.hx:454: lines 454-455
		if ($chunked && (($this->chunk_size !== null) || ($this->chunk_buf !== null))) {
			#/usr/share/haxe/std/sys/Http.hx:455: characters 4-9
			throw Exception::thrown("Invalid chunk");
		}
		#/usr/share/haxe/std/sys/Http.hx:456: lines 456-457
		if (($status < 200) || ($status >= 400)) {
			#/usr/share/haxe/std/sys/Http.hx:457: characters 4-9
			throw Exception::thrown("Http Error #" . ($status??'null'));
		}
		#/usr/share/haxe/std/sys/Http.hx:458: characters 3-14
		$api->close();
	}

	/**
	 * @param bool $post
	 * 
	 * @return void
	 */
	public function request ($post = null) {
		#/usr/share/haxe/std/sys/Http.hx:58: lines 58-74
		$_gthis = $this;
		#/usr/share/haxe/std/sys/Http.hx:59: characters 3-42
		$output = new BytesOutput();
		#/usr/share/haxe/std/sys/Http.hx:60: characters 3-21
		$old = $this->onError;
		#/usr/share/haxe/std/sys/Http.hx:61: characters 3-19
		$err = false;
		#/usr/share/haxe/std/sys/Http.hx:62: lines 62-68
		$this->onError = function ($e) use (&$err, &$old, &$_gthis, &$output) {
			#/usr/share/haxe/std/sys/Http.hx:63: characters 4-37
			$_gthis->responseBytes = $output->getBytes();
			#/usr/share/haxe/std/sys/Http.hx:64: characters 4-14
			$err = true;
			#/usr/share/haxe/std/sys/Http.hx:66: characters 4-17
			$_gthis->onError = $old;
			#/usr/share/haxe/std/sys/Http.hx:67: characters 4-14
			$_gthis->onError($e);
		};
		#/usr/share/haxe/std/sys/Http.hx:69: characters 39-55
		$post = $post || ($this->postBytes !== null) || ($this->postData !== null);
		#/usr/share/haxe/std/sys/Http.hx:70: characters 3-30
		$this->customRequest($post, $output);
		#/usr/share/haxe/std/sys/Http.hx:71: lines 71-73
		if (!$err) {
			#/usr/share/haxe/std/sys/Http.hx:72: characters 4-30
			$this->success($output->getBytes());
		}
	}

	/**
	 * @param BytesOutput $body
	 * @param Input $fileInput
	 * @param int $fileSize
	 * @param string $boundary
	 * @param Socket $sock
	 * 
	 * @return void
	 */
	public function writeBody ($body, $fileInput, $fileSize, $boundary, $sock) {
		#/usr/share/haxe/std/sys/Http.hx:275: lines 275-278
		if ($body !== null) {
			#/usr/share/haxe/std/sys/Http.hx:276: characters 4-32
			$bytes = $body->getBytes();
			#/usr/share/haxe/std/sys/Http.hx:277: characters 4-54
			$sock->output->writeFullBytes($bytes, 0, $bytes->length);
		}
		#/usr/share/haxe/std/sys/Http.hx:279: lines 279-296
		if ($boundary !== null) {
			#/usr/share/haxe/std/sys/Http.hx:280: characters 4-23
			$bufsize = 4096;
			#/usr/share/haxe/std/sys/Http.hx:281: characters 4-43
			$buf = Bytes::alloc($bufsize);
			#/usr/share/haxe/std/sys/Http.hx:282: lines 282-291
			while ($fileSize > 0) {
				#/usr/share/haxe/std/sys/Http.hx:283: characters 5-62
				$size = ($fileSize > $bufsize ? $bufsize : $fileSize);
				#/usr/share/haxe/std/sys/Http.hx:284: characters 5-17
				$len = 0;
				#/usr/share/haxe/std/sys/Http.hx:285: lines 285-288
				try {
					#/usr/share/haxe/std/sys/Http.hx:286: characters 6-45
					$len = $fileInput->readBytes($buf, 0, $size);
				} catch(\Throwable $_g) {
					#/usr/share/haxe/std/sys/Http.hx:285: lines 285-288
					if ((Exception::caught($_g)->unwrap() instanceof Eof)) {
						#/usr/share/haxe/std/sys/Http.hx:288: characters 6-11
						break;
					} else {
						#/usr/share/haxe/std/sys/Http.hx:285: lines 285-288
						throw $_g;
					}
				}
				#/usr/share/haxe/std/sys/Http.hx:289: characters 5-44
				$sock->output->writeFullBytes($buf, 0, $len);
				#/usr/share/haxe/std/sys/Http.hx:290: characters 5-20
				$fileSize -= $len;
			}
			#/usr/share/haxe/std/sys/Http.hx:292: characters 4-35
			$sock->output->writeString("\x0D\x0A");
			#/usr/share/haxe/std/sys/Http.hx:293: characters 4-33
			$sock->output->writeString("--");
			#/usr/share/haxe/std/sys/Http.hx:294: characters 4-37
			$sock->output->writeString($boundary);
			#/usr/share/haxe/std/sys/Http.hx:295: characters 4-33
			$sock->output->writeString("--");
		}
	}
}

Boot::registerClass(Http::class, 'sys.Http');
